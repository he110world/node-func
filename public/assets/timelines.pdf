<!DOCTYPE HTML>
<html lang="en-gb" class="no-js">
    <head>
        <meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"/>
<meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=2.5,user-scalable=yes">
    <meta name="citation_publisher" content="Springer-Verlag"/>
    <meta name="citation_title" content="Timelines: simplifying the programming of lag compensation for the next generation of networked games"/>
    <meta name="citation_doi" content="10.1007/s00530-012-0271-3"/>
    <meta name="citation_language" content="en"/>
    <meta name="citation_abstract_html_url" content="https://link.springer.com/article/10.1007/s00530-012-0271-3"/>
    <meta name="citation_fulltext_html_url" content="https://link.springer.com/article/10.1007/s00530-012-0271-3"/>
    <meta name="citation_pdf_url" content="https://link.springer.com/content/pdf/10.1007%2Fs00530-012-0271-3.pdf"/>
    <meta name="citation_springer_api_url" content="http://api.springer.com/metadata/pam?q&#x3D;doi:10.1007/s00530-012-0271-3&amp;api_key&#x3D;"/>
    <meta name="citation_firstpage" content="271"/>
    <meta name="citation_lastpage" content="287"/>
    <meta name="citation_author" content="Cheryl Savery"/>
    <meta name="citation_author_institution" content="Queen’s University"/>
    <meta name="citation_author_email" content="savery@cs.queensu.ca"/>
    <meta name="citation_author" content="T. C. Nicholas Graham"/>
    <meta name="citation_author_institution" content="Queen’s University"/>
    <meta name="dc.identifier" content="10.1007/s00530-012-0271-3"/>
    <meta name="format-detection" content="telephone&#x3D;no"/>
    <meta name="citation_fulltext_world_readable" content=""/>
    <meta name="meta:description" content="Lag compensation algorithms used in networked games require programmers to manage the complexities of dealing with both time and shared state. This can make implementing lag compensation techniques ch"/>
    <meta name="twitter:card" content="summary"/>
    <meta name="twitter:title" content="Timelines: simplifying the programming of lag compensation for the nex"/>
    <meta name="twitter:description" content="Lag compensation algorithms used in networked games require programmers to manage the complexities of dealing with both time and shared state. This can make implementing lag compensation techniques ch"/>
    <meta name="twitter:image" content="https://static-content.springer.com/cover/journal/530/19/3.jpg"/>
    <meta name="twitter:image:alt" content="Content cover image"/>
    <meta name="twitter:site" content="SpringerLink"/>
    <meta name="citation_journal_title" content="Multimedia Systems"/>
    <meta name="citation_journal_abbrev" content="Multimedia Systems"/>
    <meta name="citation_volume" content="19"/>
    <meta name="citation_issue" content="3"/>
    <meta name="citation_issn" content="0942-4962"/>
    <meta name="citation_issn" content="1432-1882"/>
    <meta name="citation_online_date" content="2012/06/13"/>
    <meta name="citation_cover_date" content="2013/06/01"/>
    <meta name="citation_article_type" content="Regular Paper"/>
    <meta property="og:title" content="Timelines: simplifying the programming of lag compensation for the next generation of networked games"/>
    <meta property="og:description" content="Lag compensation algorithms used in networked games require programmers to manage the complexities of dealing with both time and shared state. This can make implementing lag compensation techniques ch"/>
    <meta property="og:type" content="Article"/>
    <meta property="og:url" content="https://link.springer.com/article/10.1007/s00530-012-0271-3"/>
    <meta property="og:image" content="https://link.springer.com/springerlink-static/1048886164/images/png/SL-Square.png"/>
    <meta property="og:site_name" content="SpringerLink"/>

        <title>Timelines: simplifying the programming of lag compensation for the next generation of networked games | SpringerLink</title>
        <link rel="canonical" href="https://link.springer.com/article/10.1007/s00530-012-0271-3"/>
        <link rel="shortcut icon" href="/springerlink-static/1048886164/images/favicon/favicon.ico" />
<link rel="icon" sizes="16x16 32x32 48x48" href="/springerlink-static/1048886164/images/favicon/favicon.ico">
<link rel="icon" sizes="16x16" type="image/png" href="/springerlink-static/1048886164/images/favicon/favicon-16x16.png">
<link rel="icon" sizes="32x32" type="image/png" href="/springerlink-static/1048886164/images/favicon/favicon-32x32.png">
<link rel="icon" sizes="48x48" type="image/png" href="/springerlink-static/1048886164/images/favicon/favicon-48x48.png">
<link rel="apple-touch-icon-precomposed" href="/springerlink-static/1048886164/images/favicon/app-icon-iphone@3x.png">
<link rel="apple-touch-icon-precomposed" sizes="72x72" href="/springerlink-static/1048886164/images/favicon/ic_launcher_hdpi.png" />
<link rel="apple-touch-icon-precomposed" sizes="76x76" href="/springerlink-static/1048886164/images/favicon/app-icon-ipad.png" />
<link rel="apple-touch-icon-precomposed" sizes="114x114" href="/springerlink-static/1048886164/images/favicon/app-icon-114x114.png" />
<link rel="apple-touch-icon-precomposed" sizes="120x120" href="/springerlink-static/1048886164/images/favicon/app-icon-iphone@2x.png" />
<link rel="apple-touch-icon-precomposed" sizes="144x144" href="/springerlink-static/1048886164/images/favicon/ic_launcher_xxhdpi.png" />
<link rel="apple-touch-icon-precomposed" sizes="152x152" href="/springerlink-static/1048886164/images/favicon/app-icon-ipad@2x.png" />
<link rel="apple-touch-icon-precomposed" sizes="180x180" href="/springerlink-static/1048886164/images/favicon/app-icon-iphone@3x.png" />
<meta name="msapplication-TileColor" content="#ffffff">
<meta name="msapplication-TileImage" content="/springerlink-static/1048886164/images/favicon/ic_launcher_xxhdpi.png">
        <link rel="dns-prefetch" href="//fonts.gstatic.com" />
<link rel="dns-prefetch" href="//fonts.googleapis.com" />
<link rel="dns-prefetch" href="//google-analytics.com" />
<link rel="dns-prefetch" href="//www.google-analytics.com" />
<link rel="dns-prefetch" href="//www.googletagservices.com" />
<link rel="dns-prefetch" href="//www.googletagmanager.com" />
<link rel="dns-prefetch" href="//static-content.springer.com" />
        <link rel="stylesheet" href="/springerlink-static/1048886164/css/basic.css" media="screen">
<link rel="stylesheet" href="/springerlink-static/1048886164/css/styles.css" class="js-ctm" media="only screen and (-webkit-min-device-pixel-ratio:0) and (min-color-index:0), (-ms-high-contrast: none), only all and (min--moz-device-pixel-ratio:0) and (min-resolution: 3e1dpcm)">
<link rel="stylesheet" href="/springerlink-static/1048886164/css/print.css" media="print">


            <script id="webtrekk-properties">
    var webtrekkProperties = {
          trackDomain : "springergmbh01.webtrekk.net",
          trackId : "935649882378213",
      };
    </script>
    <script type="text/javascript" async src="/springerlink-static/1048886164/js/webtrekk_v4.min.js"></script>

            <script>
        var dataLayer = [{
                'GA Key':'UA-26408784-1',
                'Event Category':'Article',
                'Open Access':'Y',
                'Labs':'Y',
                'DOI':'10.1007\/s00530-012-0271-3',
                'VG Wort Identifier':'vgzm.415900-10.1007-s00530-012-0271-3',
                'HasAccess':'Y',
                'Full HTML':'Y',
                'Has Body':'Y',
                'Static Hash':'1048886164',
                'Has Preview':'N',
                'user':{'license': {'businessPartnerID': [], 'businessPartnerIDString': ''}},
                'content':{'type': 'article', 'category': {'pmc': {'primarySubject': 'Computer Science', 'primarySubjectCode': 'I', 'secondarySubjects': {'4': 'Data Storage Representation', '5': 'Data Encryption', '6': 'Computer Graphics', '1': 'Multimedia Information Systems', '2': 'Computer Communication Networks', '3': 'Operating Systems'}, 'secondarySubjectCodes': {'4': 'I15025', '5': 'I15033', '6': 'I22013', '1': 'I18059', '2': 'I13022', '3': 'I14045'}}}},
                'Access Type':'subscription',
                'Page':'article',
                'Bpids':'',
                'Bpnames':'',
                'SubjectCodes':'SCI, SCI18059, SCI13022, SCI14045, SCI15025, SCI15033, SCI22013',
                'Keywords':'Lag compensation, Consistency maintenance, Networked games',
                'Country':'CN',
                'Journal Id':'530',
                'Journal Title':'Multimedia Systems',
        }];
    </script>

    <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
            j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
            'https://www.googletagmanager.com/gtm.js?cache-busting=' + new Date().getTime() + '&id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-WCF9Z9');</script>

    </head>
    <body>
        <noscript><iframe src="//www.googletagmanager.com/ns.html?id=GTM-WCF9Z9"
                      height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>

    <nav class="skip-to">
    <a class="skip-to__link skip-to__link--article" href="#main-content" title="Skip directly to the main content">Skip to main content</a>
        <a class="skip-to__link skip-to__link--contents" href="#article-contents" title="Skip directly to section list">Skip to sections</a>
</nav>
        <div class="page-wrapper">
            <noscript>
    <div class="nojs-banner u-interface">
        <p>This service is more advanced with JavaScript available, learn more at <a
                href="http://activatejavascript.org" target="_blank" rel="noopener noreferrer">http://activatejavascript.org</a>
        </p>
    </div>
</noscript>
                    <div id="leaderboard" class="leaderboard u-hide" data-component="SpringerLink.GoogleAds" data-namespace="leaderboard"></div>

                <header id="header" class="header u-interface" role="banner">
        <div class="header__content">
            <div class="header__menu-container">
                    <a id="logo" class="site-logo" href="/" title="Go to homepage">
            <span class="u-screenreader-only">SpringerLink</span>
            <svg class="site-logo__springer" width="148" height="30" role="img" aria-label="SpringerLink Logo">
                <image width="148" height="30" alt="SpringerLink Logo" src="/springerlink-static/1048886164/images/png/springerlink.png" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/springerlink-static/1048886164/images/svg/springerlink.svg"></image>
            </svg>
    </a>

                    <div class="nav-container u-interface">
    <div class="global-nav__wrapper">
        <div class="search-button">
            <a class="search-button__label" href="#search-container">
                <span class="search-button__title">Search</span><svg width="12" height="12" viewBox="222 151 12 12" version="1.1" xmlns="http://www.w3.org/2000/svg">
                    <path d="M227 159C228.7 159 230 157.7 230 156 230 154.3 228.7 153 227 153 225.3 153 224 154.3 224 156 224 157.7 225.3 159 227 159L227 159 227 159 227 159ZM230 160.1L231.1 159 233.9 161.7C234.2 162.1 234.2 162.6 233.9 162.9 233.6 163.2 233.1 163.2 232.7 162.9L230 160.1 230 160.1 230 160.1 230 160.1ZM227 161L227 161C224.2 161 222 158.8 222 156 222 153.2 224.2 151 227 151 229.8 151 232 153.2 232 156 232 158.8 229.8 161 227 161L227 161 227 161 227 161 227 161Z" stroke="none" fill-rule="evenodd"></path>
                </svg>
            </a>
        </div>

        <ul class="global-nav" data-component="SpringerLink.Menu" data-title="Navigation menu" data-text="Menu" role="navigation">
            <li>
                <a href="/">
                    <span class="u-overflow-ellipsis">Home</span>
                </a>
            </li>
            <li>
                <a href="/contactus">
                    <span class="u-overflow-ellipsis">Contact Us</span>
                </a>
            </li>

                <li class="global-nav__logged-out">
                    <a class="test-login-link" href="//link.springer.com/signup-login?previousUrl=https%3A%2F%2Flink.springer.com%2Farticle%2F10.1007%2Fs00530-012-0271-3">
                        <span class="u-overflow-ellipsis">Log in</span>
                    </a>
                </li>

        </ul>
    </div> 
</div> 
            </div>

        </div>

            <div id="search-container">
                <div class="search">
                    <div class="search__content">
                        <form class="u-form-single-input" action="/search" method="get" role="search">
    <input aria-label="Search" name="query" type="text" autocomplete="off" value="" placeholder="Search">
    <input class="u-hide-text" type="submit" value="Submit" title="Submit">
    <svg class="u-vertical-align-absolute" width="13" height="13" viewBox="222 151 13 13" version="1.1" xmlns="http://www.w3.org/2000/svg">
        <path d="M227 159C228.7 159 230 157.7 230 156 230 154.3 228.7 153 227 153 225.3 153 224 154.3 224 156 224 157.7 225.3 159 227 159L227 159 227 159 227 159ZM230 160.1L231.1 159 233.9 161.7C234.2 162.1 234.2 162.6 233.9 162.9 233.6 163.2 233.1 163.2 232.7 162.9L230 160.1 230 160.1 230 160.1 230 160.1ZM227 161L227 161C224.2 161 222 158.8 222 156 222 153.2 224.2 151 227 151 229.8 151 232 153.2 232 156 232 158.8 229.8 161 227 161L227 161 227 161 227 161 227 161Z" stroke="none" fill-rule="evenodd"/>
    </svg>
</form>
                    </div>
                </div>
            </div>
    </header>

            
            

            <main role="main" id="main-content">
                <article class="main-wrapper">
                    <div class="main-container uptodate-recommendations-off">
                        <aside class="main-sidebar-left">
                            <div class="main-sidebar-left__content">
                                <div class="test-cover cover-image">
        <a class="test-cover-link" href="/journal/530" title="Multimedia Systems">
            <img class="test-cover-image" src="https://static-content.springer.com/cover/journal/530/19/3.jpg" alt="Multimedia Systems" itemprop="image"/>
        </a>

</div>
                            </div>
                        </aside>

                        <div class="main-body" data-role="NavigationContainer">
                            <div class="main-body__content">
                                        <div class="cta-button-container u-hide-two-col">
                    <a href="/content/pdf/10.1007%2Fs00530-012-0271-3.pdf" target="_blank" class="c-button c-button--blue c-button__icon-right gtm-pdf-link" title="Download this article in PDF format" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" version="1.1"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g fill="#0176C3"><g transform="translate(12.000000, 5.000000)"><path d="M7 7.3L7 1C7 0.4 6.6 0 6 0 5.4 0 5 0.4 5 1L5 7.3 3.5 5.7C3.1 5.3 2.5 5.3 2.1 5.7L2.1 5.7C1.7 6.1 1.7 6.7 2.1 7.1L5.3 10.3C5.7 10.7 6.3 10.7 6.7 10.3L9.9 7.1C10.3 6.7 10.3 6.1 9.9 5.7L9.9 5.7C9.5 5.3 8.9 5.3 8.5 5.7L7 7.3 7 7.3ZM0 13C0 12.4 0.5 12 1 12L11 12C11.6 12 12 12.4 12 13 12 13.6 11.5 14 11 14L1 14C0.4 14 0 13.6 0 13L0 13Z"/></g></g></g></svg>
            <span class="hide-text-small">Download</span>
            <span>PDF</span>
        </a>

        </div>



                                <!DOCTYPE html
  SYSTEM "about:legacy-compat">
<div xmlns="http://www.w3.org/1999/xhtml" class="FulltextWrapper"><div class="ArticleHeader main-context"><div id="enumeration" class="enumeration"><p><a href="/journal/530" title="Multimedia Systems"><span class="JournalTitle">Multimedia Systems</span></a></p><p class="icon--meta-keyline-before"><span class="ArticleCitation_Year"><time datetime="2013-06">June 2013</time>, </span><span class="ArticleCitation_Volume">Volume 19, </span><a class="ArticleCitation_Issue" href="/journal/530/19/3/page/1">Issue 3</a>,
                       <span class="ArticleCitation_Pages"> pp 271–287</span></p></div><div xmlns="" class="MainTitleSection"><h1 xmlns="http://www.w3.org/1999/xhtml" class="ArticleTitle" lang="en">Timelines: simplifying the programming of lag compensation for the next generation of networked games</h1></div><div class="authors u-clearfix" data-component="SpringerLink.Authors"><ul class="u-interface u-inline-list authors__title" data-role="AuthorsNavigation"><li><span>Authors</span></li><li><a href="#authorsandaffiliations" class="gtm-tab-authorsandaffiliations">Authors and affiliations</a></li></ul><div class="authors__list" data-role="AuthorsList"><ul class="test-contributor-names"><li><span itemprop="name" class="authors__name">Cheryl Savery</span><span class="author-information"><span class="authors__contact"><a href="mailto:savery@cs.queensu.ca" title="savery@cs.queensu.ca" itemprop="email" class="gtm-email-author">Email author</a></span></span></li><li><span itemprop="name" class="authors__name">T. C. Nicholas Graham</span></li></ul></div></div><div class="main-context__container" data-component="SpringerLink.ArticleMetrics"><div class="main-context__column"><span><div id="open-choice-icon" class="open-access u-text-separator-after-micro"><abbr title="This content is freely available to anyone, anywhere, at any time">Open Access</abbr></div><span class="test-render-category">Regular Paper</span></span><div class="article-dates" data-component="SpringerLink.ArticleDates"><dl><dt>First Online: </dt><dd class="article-dates__first-online"><time datetime="2012-06-13">13 June 2012</time></dd></dl><dl class="article-dates__history"></dl></div></div>    <div class="main-context__column">
        <ul id="book-metrics" class="article-metrics">
                <li class="article-metrics__item">
                        <a class="article-metrics__link gtm-citations-count" href="http://citations.springer.com/item?doi&#x3D;10.1007/s00530-012-0271-3" target="_blank" rel="noopener noreferrer"
                           title="Visit Springer Citations for full citation details" id="citations-link">
                           <span id="citations-count-number" class="test-metric-count c-button-circle gtm-citations-count">1</span>
                           <span class="test-metric-name article-metrics__label gtm-citations-count">Citations</span>
                        </a>
                </li>
                <li class="article-metrics__item">
                         <span class="article-metrics__views">3.3k</span>
                         <span class="article-metrics__label">Downloads</span>
                </li>
        </ul>
    </div>
</div></div><section class="Abstract" id="Abs1" tabindex="-1" lang="en"><h2 class="Heading">Abstract</h2><p class="Para">Lag compensation algorithms used in networked games require programmers to manage the complexities of dealing with both time and shared state. This can make implementing lag compensation techniques challenging. The difficulties in expressing these algorithms limit experimentation with different algorithms and inhibit programmers from exploring the space of the algorithms and testing their effects. The solution is to have a programming model that is better able to deal with time. In this paper, we present such a programming model, <em class="EmphasisTypeItalic ">timelines</em>. Timelines dramatically reduce the time and effort required to implement lag compensation techniques by allowing for the explicit treatment of time. The timelines model has been implemented as part of the Janus toolkit.</p></section><div class="KeywordGroup" lang="en"><h3 class="Heading">Keywords</h3><span class="Keyword">Lag compensation </span><span class="Keyword">Consistency maintenance </span><span class="Keyword">Networked games </span></div><div class="note test-pdf-link" id="cobranding-and-download-availability-text"><div>    <a class="gtm-pdf-link" href="/content/pdf/10.1007%2Fs00530-012-0271-3.pdf" target="_blank" rel="noreferrer noopener">Download</a>
 fulltext PDF</div></div><div class="article-actions--inline" id="article-actions--inline" data-component="article-actions--inline"></div><div id="body"><section id="Sec1" tabindex="-1" class="Section1 RenderAsSection1"><h2 class="Heading"><span class="HeadingNumber">1 </span>Introduction</h2><div class="content"><p class="Para">Networked digital games afford an unprecedented level of interaction at a distance. Games permit people to closely coordinate the activities of small groups in real-time, to engage in large combats involving hundreds of people, and to view and react to the actions of opponents in real-time. New gaming technologies, however, are increasingly exposing the limits of interaction over the network. For example, motion-based input technologies such as Microsoft’s Kinect open the opportunity for true real-time combat, where players react to other players’ movements as they occur. Hardware advances have allowed games to include rich physics, enabling highly accurate sports and driving simulations, as well as allowing the game world itself to be physically modified as a consequence of player actions. While examples exist of games fully taking advantage of these techniques, the presence of network latency limits the ability to achieve such interactions over the network.</p><p class="Para">Specifically, true real-time combat is inhibited by the fact that it takes time to transmit each player’s actions over the network. By the time a player sees another player starting an action, the action may have been completed, making it impossible to react. Similarly, it is difficult to synchronize physical actions (e.g., two players trying to kick the same ball) in the presence of latency. Current games make compromises to accommodate latency. For example, World of Warcraft’s combat is based on special actions rather than true real-time movement. The execution of these actions is delayed, allowing time for them to be transmitted over the network. Games often compromise by making physics purely cosmetic. For example, a physics simulation might be used to show how the shards of a broken window fly through the air, but these positions are not used to compute damage to players.</p><p class="Para">Some of the limitations of latency are fundamental, but progress can be made through the deployment of novel lag compensation algorithms. For example, Bernier’s Half-Life algorithm [<span class="CitationRef"><a href="#CR3">3</a></span>] helps with the problem of real-time aiming, and Sharkey, Ryan and Robert’s local perception filters show great promise in the distributed physics problem [<span class="CitationRef"><a href="#CR32">32</a></span>]. A significant barrier to the invention, evaluation and deployment of such algorithms, however, is their complexity. It is hard to understand the consequences of new algorithms’ tradeoffs on player experience; it is hard to compare alternative algorithms, and it is hard to communicate to game developers how the algorithms work so that they can be implemented in new contexts.</p><p class="Para">In this paper, we argue that much of the complexity of lag compensation algorithms comes from the fact that they deal with time, requiring programmers to consider not just what value shared data has, but when that value was held. Current programming languages do not provide support for dealing with time. We remedy this lack by presenting our timelines programming model for game networking. Timelines is a novel programming model for shared state in multiplayer games that exposes the temporal dimension of shared data. This allows programmers to access and manipulate past and future state values. Timeline variables can be shared between remote players, allowing programmers to modify the rate at which time flows and to create divergent timelines for different players. By making time an integral part of the programming model, timelines simplify the expression of lag compensation algorithms. This paves the way for the exploration of new ideas. Programmers can easily compare algorithms, test combinations of algorithms and develop new algorithms potentially enabling new styles of multiplayer games.</p><p class="Para">Our timelines model has been implemented within the Janus toolkit, and used by the authors and by other developers to experiment with lag compensation techniques and to create a range of multiplayer games. To show the power of timelines, we demonstrate how a range of existing algorithms can be expressed. To truly show the power of the approach, we use it to extend the local perception filters [<span class="CitationRef"><a href="#CR32">32</a></span>] algorithm, combining it with smooth corrections [<span class="CitationRef"><a href="#CR34">34</a></span>] to provide a novel solution to the distributed physics problem.</p><p class="Para">The paper is organized as follows. We begin by arguing why time plays such an important role in lag compensation, thus motivating the need for a programming model that explicitly deals with time. Next, we present our timelines model, showing how it facilitates the implementation of a range of lag compensation algorithms, including our novel extension to local perception filters. Finally we discuss the model’s implementation in the Janus toolkit, and report our experience using the toolkit.</p></div></section><section id="Sec2" tabindex="-1" class="Section1 RenderAsSection1"><h2 class="Heading"><span class="HeadingNumber">2 </span>Why time matters</h2><div class="content"><p class="Para">Lag compensation techniques are used in games to reduce surprising behavior due to the presence of network latency. Surprises might include not hitting an enemy who is clearly within the player’s cross-hairs, being damaged in a collision when no obstacle can be seen, or seeing another player suddenly warp from one location to another. This surprising behavior results from differences in players’ views of shared state due to the time to transmit state changes over the network.</p><p class="Para">Lag compensation algorithms attempt to reduce surprise by mitigating the effects of network lag. As we shall discuss in detail, there are three fundamental approaches to compensating for lag: dead reckoning [<span class="CitationRef"><a href="#CR1">1</a></span>], delaying local inputs [<span class="CitationRef"><a href="#CR9">9</a></span>], and remote lag [<span class="CitationRef"><a href="#CR3">3</a></span>]. These techniques are notoriously difficult to program, and their effects are difficult to analyze. In this section, we argue that this difficulty arises from the fact that the programmer needs to deal with time as well as with shared state data. For example, a lag compensation algorithm must account for when a shot was fired as well as where it was aimed to prevent situations where dead men are able to keep shooting [<span class="CitationRef"><a href="#CR24">24</a></span>]. Here we describe four key problems that highlight the importance of time when implementing shared data in networked games.</p><section id="Sec3" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">2.1 </span>Stale message problem</h3><div class="content"><p class="Para">Because it takes time to transmit messages over a network, state updates are necessarily out of date (or “stale”) on their arrival. Clients must make adjustments to account for the untimeliness of the information; for example, a message indicating that a remote avatar has moved is in reality informing the local client where the remote avatar was at some point in the past.</p><p class="Para">Due to variance in network delivery times, it is difficult to estimate exactly when messages were sent (as required to assess exactly how stale the information is.) Solving this properly requires messages to be timestamped, and for the difference in clocks between the local and remote clients to be known [<span class="CitationRef"><a href="#CR7">7</a></span>]. In sum, the stale message problem requires programmers to treat messages not just as values, but as values that describe state at an earlier point in time.</p></div></section><section id="Sec4" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">2.2 </span>Stale state problem</h3><div class="content"><p class="Para">Some state within a game may be updated frequently; e.g., in a game executing at 60 frames/second, a local avatar’s position may be updated every 17 ms. To conserve bandwidth, games typically transmit state updates less frequently, e.g., every 50 ms [<span class="CitationRef"><a href="#CR3">3</a></span>]. Updates may be further deferred if the local client can determine that the remote clients have enough information to accurately predict the updated state. Clients may therefore need to render several frames before new state information arrives, and thus must be able to estimate the present state of the remote client based on the last state information available. This requires clients to keep track of the age of local representations of remote state, and have mechanisms for compensating for state updates that have been suppressed by the remote client.</p></div></section><section id="Sec5" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">2.3 </span>Frame of reference problem</h3><div class="content"><div class="Para">Some games deliberately choose to use a different temporal frame of reference on each client. For example, in the Half-Life series first-person shooter games, a constant time delay is applied to the movements of other players’ avatars [<span class="CitationRef"><a href="#CR3">3</a></span>]. This increases the predictability of the movement of remote avatars, at the cost of increasing the divergence of state between different players [<span class="CitationRef"><a href="#CR31">31</a></span>]. Thus, as shown in Fig. <span class="InternalRef"><a href="#Fig1">1</a></span>, instead of there being a single global game state, each player has his own personal view of the game world. Hits are then based on what a player actually sees on his screen instead of being based on the “true” location of the other player’s avatar. This allows players to aim and shoot directly at a target avatar without accounting for incorrect positions caused by network delays. To provide consistency, and to prevent cheating, a server must be able to take into account what each player sees and reconstruct that view. This requires the server to unwind time and reconstruct the state of both the target and shooter clients at the point in time when a shot was fired.<figure class="Figure" id="Fig1"><div class="MediaObject" id="MO1"><a href="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig1_HTML.gif" target="_blank" rel="noopener noreferrer"><span class="u-screenreader-only">Open image in new window</span><img src="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig1_HTML.gif" alt=""></img></a></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Fig. 1</span><p class="SimplePara">Using remote lag, each player has his own view of the game world. The view of remote avatars is delayed by a fixed time which is greater than the network latency. This allows players to aim where they see other players’ avatars instead of attempting to aim at the actual current position of the avatar</p></div></figcaption></figure></div></div></section><section id="Sec6" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">2.4 </span>Multiple-times at-once problem</h3><div class="content"><div class="Para">Some lag compensation techniques require that the client be able to simultaneously access shared state in the past, the present and the future. For example, this problem arises in smooth correction algorithms, as shown in Fig. <span class="InternalRef"><a href="#Fig2">2</a></span>. When clients use prediction (such as dead reckoning) to extrapolate the position of a remote entity, that prediction will be incorrect whenever the entity has changed speed or direction. Once the error is detected, instead of immediately warping the remote entity to the correct position, the smooth corrections algorithm progressively moves the avatar to the new position. This provides a less jarring means of repairing this incorrect state. To implement smooth corrections, the programmer must access the previous state to know where the entity was, access the current state to know where the entity should be and calculate a future state to be able to smoothly merge the two states over time.<figure class="Figure" id="Fig2"><div class="MediaObject" id="MO2"><a href="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig2_HTML.gif" target="_blank" rel="noopener noreferrer"><span class="u-screenreader-only">Open image in new window</span><img src="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig2_HTML.gif" alt=""></img></a></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Fig. 2</span><p class="SimplePara">Smooth corrections require access to (<em class="EmphasisTypeItalic ">i</em>) where the avatar was in the past (as reported by newly arrived message), (<em class="EmphasisTypeItalic ">ii</em>) where the avatar is now, and (<em class="EmphasisTypeItalic ">iii</em>) where we want the avatar to be in the future</p></div></figcaption></figure></div><p class="Para">As we see from these examples, working with time is a fundamental component of lag compensation algorithms. The examples show how it is necessary for clients to interpret state and state updates relative to times in the past, and necessary for servers to reconstruct the differing temporal frames of reference of different clients, and sometimes necessary for clients to simultaneously access past, present and future values of the same state.</p><p class="Para">Traditional programming models treat state as having only a single value, describing the current time. This is the root cause of the difficulty of expressing lag compensation algorithms, which fundamentally must deal with different temporal frames of reference. We will show that a programming model that explicitly incorporates time dramatically simplifies the implementation of these algorithms.</p></div></section></div></section><section id="Sec7" tabindex="-1" class="Section1 RenderAsSection1"><h2 class="Heading"><span class="HeadingNumber">3 </span>The timelines model</h2><div class="content"><div class="Para">In distributed systems, shared data is typically stored as an instantaneous value representing the data’s current state [<span class="CitationRef"><a href="#CR8">8</a></span>]. As we have discussed, this leads to difficulties when programming with time, as required in lag compensation algorithms. In contrast, our timelines model represents shared state variables as values indexable by time. Variables represent all the values they have held in the past and all values they will hold in the future. Timelines provide:<div class="UnorderedList"><ul class="UnorderedListMarkBullet"><li><p class="Para">Get/set operations that access the timeline’s value at a given time; and</p></li><li><p class="Para">Interpolation and extrapolation functions that estimate values for times when no value is known.</p></li></ul></div></div><p class="Para">As we shall see, this simple model of shared data allows the simple expression of a wide variety of lag compensation algorithms.</p><div class="Para">Figure <span class="InternalRef"><a href="#Fig3">3</a></span> shows how the elements of the Timelines model are combined. In the example timeline, <em class="EmphasisTypeItalic ">v</em>1, <em class="EmphasisTypeItalic ">v</em>2 and <em class="EmphasisTypeItalic ">v</em>3 represent values for times <em class="EmphasisTypeItalic ">t</em>1, <em class="EmphasisTypeItalic ">t</em>2 and <em class="EmphasisTypeItalic ">t</em>3, respectively. These are known values, meaning that they have been explicitly set in the timeline.<figure class="Figure" id="Fig3"><div class="MediaObject" id="MO3"><a href="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig3_HTML.gif" target="_blank" rel="noopener noreferrer"><span class="u-screenreader-only">Open image in new window</span><img src="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig3_HTML.gif" alt=""></img></a></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Fig. 3</span><p class="SimplePara">Elements of the timelines model: a timeline includes a set of past and future values (<em class="EmphasisTypeItalic ">v</em><sub>1</sub>, <em class="EmphasisTypeItalic ">v</em><sub>2</sub>,…<em class="EmphasisTypeItalic ">v</em><sub>3</sub>), along with the times at which they hold (<em class="EmphasisTypeItalic ">t</em><sub>1</sub>, <em class="EmphasisTypeItalic ">t</em><sub>2</sub>,…<em class="EmphasisTypeItalic ">t</em><sub>3</sub>). Values between these times are computed using an interpolation function, and values after these times are estimated using an extrapolation function</p></div></figcaption></figure></div><div class="Para">To illustrate this, consider <em class="EmphasisTypeItalic ">fuel</em>, an integer timeline representing the amount of fuel in a spaceship. Storing values in the <em class="EmphasisTypeItalic ">fuel</em> timeline is as simple as assigning those values at a specific time. Thus,<div id="Equa" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{fuel(-100)=230;}} $$</div></div>assigns 230 to the integer timeline at 100 ms in the past, and<div id="Equb" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{fuel(0)=200;}} $$</div></div>assigns 200 to the <em class="EmphasisTypeItalic ">fuel</em> timeline at the current time. (Time references are expressed in milliseconds, may be positive or negative, and are relative to the current time.)</div><p class="Para">When the value for a given time is not known, it is interpolated or extrapolated from its neighboring known values. The value of <em class="EmphasisTypeItalic ">fuel</em>(−50) is derived as 215 using linear interpolation between the two known values of 200 and 230, and the value of <em class="EmphasisTypeItalic ">fuel</em>(100) is extrapolated to be 170. Thus, although our timeline currently contains only two known values, any value from the past or future can be determined through interpolation or extrapolation. As more known values are added to the timeline, the interpolated and extrapolated values may change.</p><div class="Para">The timelines model is fully replicated, with each client storing a local timeline object for each portion of the shared state in which it is interested. If two clients create instances of the same timeline, the timelines are automatically synchronized. Figure <span class="InternalRef"><a href="#Fig4">4</a></span> shows two clients each with a copy of the same timeline. When Client 2 inserts a new value into the local timeline, the value is propagated over the network and a remote update function on Client 1 is invoked. The remote update function specifies how updates arriving over the network are to be applied. By default, the remote update function inserts the value into Client 1’s timeline. However, as we will see, it is possible to override this default behavior to implement techniques such as smooth corrections.<figure class="Figure" id="Fig4"><div class="MediaObject" id="MO6"><a href="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig4_HTML.gif" target="_blank" rel="noopener noreferrer"><span class="u-screenreader-only">Open image in new window</span><img src="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig4_HTML.gif" alt=""></img></a></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Fig. 4</span><p class="SimplePara">Timelines are fully replicated. When a client sets a new value into the local timeline, the remote update function inserts the value into the same timeline on all other clients</p></div></figcaption></figure></div><p class="Para">To illustrate the model, we now discuss several lag compensation techniques used in multiplayer games and show how timelines can be used to implement them.</p></div></section><section id="Sec8" tabindex="-1" class="Section1 RenderAsSection1"><h2 class="Heading"><span class="HeadingNumber">4 </span>Using timelines</h2><div class="content"><p class="Para">In this section, we illustrate the use of timelines to express a canonical set of lag compensation algorithms. Through these examples, we demonstrate the features of the model, as well as illustrate its expressiveness.</p><div class="Para">Multiplayer games use a variety of techniques for lag compensation. These techniques have generally been proposed to enhance user experience or to combat cheating [<span class="CitationRef"><a href="#CR13">13</a></span>]. Lag compensation techniques used in games make tradeoffs between the degree of consistency provided and the responsiveness to player commands [<span class="CitationRef"><a href="#CR31">31</a></span>]. Based on these tradeoffs, we can divide the mechanisms used for lag compensation into three broad categories: predictive techniques, delayed input techniques and time-offsetting techniques. The algorithms used within each category are described below:<div class="UnorderedList"><ul class="UnorderedListMarkBullet"><li><p class="Para"><em class="EmphasisTypeItalic ">Predictive techniques</em> estimate the current value of remote state from state that is available locally. For example, the dead reckoning [<span class="CitationRef"><a href="#CR21">21</a></span>] technique is widely used to estimate the current positions of other players’ avatars based on earlier position and velocity information that has been sent over the network. This helps to solve the “stale state” problem described in Sect. <span class="InternalRef"><a href="#Sec2">2</a></span>, by providing a means of estimating what has happened on the remote client between state updates. Predictive algorithms can be used to address the “stale update” problem. When a state update arrives over the network, prediction can be used to estimate the state’s current value, as opposed to the value at the time the message was sent. To achieve this, state update messages must be timestamped, and the clocks on the local and remote clients must be synchronized [<span class="CitationRef"><a href="#CR1">1</a></span>]. Finally, if smooth corrections [<span class="CitationRef"><a href="#CR34">34</a></span>] are used to repair incorrect predictions, the programmer must be able to access states from the past, present and future, as shown in Fig. <span class="InternalRef"><a href="#Fig2">2</a></span>.</p></li><li><p class="Para"><em class="EmphasisTypeItalic ">Delayed input techniques</em> such as bucket synchronization [<span class="CitationRef"><a href="#CR4">4</a></span>] and local lag [<span class="CitationRef"><a href="#CR25">25</a></span>] defer local actions to allow simultaneous execution by all clients. Programming local lag requires mechanisms for delaying inputs and for estimating message delivery time between the different nodes. It also requires a policy for handling messages that take longer than the lag constant to arrive. Bucket synchronization requires a mechanism for pausing all clients at exactly the same point of execution, applying all pending messages in the same order, and resuming execution.</p></li><li><p class="Para"><em class="EmphasisTypeItalic ">Time-offsetting techniques</em> such as remote lag [<span class="CitationRef"><a href="#CR3">3</a></span>] and local perception filters [<span class="CitationRef"><a href="#CR32">32</a></span>] insert a delay in the application of remote state updates. For example, as shown in Fig. <span class="InternalRef"><a href="#Fig1">1</a></span>, a remote player’s avatar’s position is lagged by a constant number of milliseconds. This approach trades off the immediacy of positional updates versus reducing the jitter caused by variance in time to deliver updates over the network.</p></li></ul></div></div><p class="Para">All of these techniques involve the manipulation of time—either predicting the future, scheduling actions for future execution, or providing divergent timelines for different players. In this section, we now show how the timelines model simplifies the implementation of algorithms from each of these styles of techniques.</p><section id="Sec9" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">4.1 </span>Predictive techniques</h3><div class="content"><p class="Para">Predictive techniques involve two components. First, extrapolation functions are used to estimate the current state of a remote entity based on previous known states. For example, dead reckoning is widely used as a mechanism for estimating the position of remote avatars [<span class="CitationRef"><a href="#CR21">21</a></span>]. Second, a mechanism is required to correct the state of an entity when the prediction is proven wrong. The following sections describe both of these components in more detail and show how using timelines facilitates their implementation.</p><section id="Sec10" tabindex="-1" class="Section3 RenderAsSection3"><h4 class="Heading"><span class="HeadingNumber">4.1.1 </span>Example: dead reckoning</h4><div class="content"><p class="Para">Dead reckoning is commonly used in distributed interactive simulations to reduce the number of network messages required to convey positional updates. Dead reckoning is based on the assumption that entities rarely change direction or speed, and that therefore previous movement is an accurate predictor of current movement. The IEEE distributed interactive simulation standard defines a protocol for dead reckoning [<span class="CitationRef"><a href="#CR20">20</a></span>, <span class="CitationRef"><a href="#CR21">21</a></span>] whereby an extrapolation equation is used to estimate the position of an entity. Instead of transmitting an update packet following each movement of the entity, updates are only transmitted when an error threshold is exceeded. When dead reckoning is used in multiplayer games, the client controlling an entity transmits position and velocity data to remote clients, which then use this information to estimate current or future positions of the entity.</p><p class="Para">Dead reckoning algorithms, however, frequently fail to account for delays caused by network latency. Typically, when a client receives a positional update, that position is set as the entity location at the current local time, not at the time the message was sent. Aggarwal et al. [<span class="CitationRef"><a href="#CR1">1</a></span>] have shown that treating remote updates as past events (i.e., accounting for network latency) improves the accuracy of dead reckoning. However, this approach requires the programming complexities of timestamping positional update messages and synchronizing the clocks on the local and remote clients.</p><p class="Para">Dead reckoning with lag awareness is built into the timelines model, requiring no extra programming by the game developer. The model’s extrapolation function provides dead reckoning as the default behavior. When updates are received from a remote client, they are automatically inserted into the local timeline at the time they were sent, not the time they were received.</p><div class="Para">The following example shows how easily dead reckoning with lag awareness can be implemented using timelines. Consider that “Alice” and “Bob” each control avatars in a game. Alice’s avatar’s position is represented in a timeline of positions called <em class="EmphasisTypeItalic ">alicePos</em>. We assume the traditional game architecture where inputs are polled and the frame is rendered asynchronously. Thus, when Alice moves to a new position (<em class="EmphasisTypeItalic ">x</em>, <em class="EmphasisTypeItalic ">y</em>), the operation on Alice’s client to process the movement is simply:<div id="Equc" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{alicePos\,(0)=(x, y);}} $$</div></div></div><div class="Para">This operation inserts the value (<em class="EmphasisTypeItalic ">x</em>, <em class="EmphasisTypeItalic ">y</em>) into the <em class="EmphasisTypeItalic ">alicePos</em> timeline at time 0, the current time. Then, on both Bob and Alice’s clients, when the frame is rendered, Alice’s position is drawn as:<div id="Equd" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{DrawAvatar\,(alicePos(0));}} $$</div></div></div><p class="Para">That is, the avatar is drawn at its position at the current time.</p><p class="Para">On Bob’s client, as messages indicating Alice’s movements arrive, they are automatically inserted into the timeline taking into account the network latency. For example, if the message containing Alice’s position required 60 ms to travel over the network, then the position is automatically inserted in the <em class="EmphasisTypeItalic ">alicePos</em> timeline on Bob’s computer at time −60.</p><p class="Para">When Bob’s client uses the value of <em class="EmphasisTypeItalic ">alicePos(0)</em> to render Alice’s position, it extrapolates from her last known position. This example shows how the timelines model provides lag-aware dead reckoning as default behavior, requiring no special programming.</p></div></section><section id="Sec11" tabindex="-1" class="Section3 RenderAsSection3"><h4 class="Heading"><span class="HeadingNumber">4.1.2 </span>Example: smooth corrections</h4><div class="content"><p class="Para">With dead reckoning, when a new positional update arrives that is significantly different from the current predicted location, the simplest solution is to immediately move the entity to the new location. This results in jerky animation and can be visually jarring for the player. Convergence techniques [<span class="CitationRef"><a href="#CR34">34</a></span>] may be used to correct these errors in a smooth, less surprising manner. We instead move the entity progressively to its correct position. For example, we might aim to have the entity in the correct position 200 ms in the future. It is not sufficient to move the entity to its current position 200 ms in the future; instead, we must estimate where it will be in 200 ms, and progressively move it to that location.</p><div class="Para">The first step in the algorithm is to select the location and time of the entity’s corrected position (e.g., the new location 200 ms in the future.) The entity then moves at increased speed until it reaches this correct location, as shown in Fig. <span class="InternalRef"><a href="#Fig5">5</a></span>a. An even better correction can be accomplished by following a curved path to the new location, as shown in Fig. <span class="InternalRef"><a href="#Fig5">5</a></span>b. This progressive correction can be difficult to program, as we need to simultaneously deal with entity’s current position, its correct (but stale) position, and its future correct position. Furthermore, the avatar’s position must be updated over time until the correct position is attained.<figure class="Figure" id="Fig5"><div class="MediaObject" id="MO9"><a href="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig5_HTML.gif" target="_blank" rel="noopener noreferrer"><span class="u-screenreader-only">Open image in new window</span><img src="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig5_HTML.gif" alt=""></img></a></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Fig. 5</span><p class="SimplePara">Corrections to incorrect states predicted by dead reckoning may be corrected by <strong class="EmphasisTypeBold ">a</strong> following a straight path to a future point predicted by dead reckoning, or <strong class="EmphasisTypeBold ">b</strong> following a curved path</p></div></figcaption></figure></div><p class="Para">Smooth positional corrections can be easily specified using timelines. We do this by overriding the position timeline’s default remote update function of Fig. <span class="InternalRef"><a href="#Fig4">4</a></span>. Normally, remote updates are handled by adding the incoming value to the timeline at the appropriate time. This approach replicates the timeline on all clients that have access to it. For smooth corrections, however, we purposely wish the timelines to diverge—when a local client receives a correction, the local timeline is modified to gradually move toward a consistent state.</p><div class="Para">Figure <span class="InternalRef"><a href="#Fig6">6</a></span> shows this approach. We use a timeline to represent the positions of a remote player’s avatar. The current position of the avatar has been extrapolated, based on these known positions. We identify this extrapolated location as <em class="EmphasisTypeItalic ">currentPos</em>. Then, as seen in Fig. <span class="InternalRef"><a href="#Fig6">6</a></span>, the client receives a message indicating that the avatar was actually at a position <em class="EmphasisTypeItalic ">fixupPos</em> at some earlier time <em class="EmphasisTypeItalic ">fixupTime</em>. Extrapolating from this position and time, we deduce that the avatar should in fact currently be at position <em class="EmphasisTypeItalic ">correctCurrentPos</em>.<figure class="Figure" id="Fig6"><div class="MediaObject" id="MO10"><a href="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig6_HTML.gif" target="_blank" rel="noopener noreferrer"><span class="u-screenreader-only">Open image in new window</span><img src="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig6_HTML.gif" alt=""></img></a></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Fig. 6</span><p class="SimplePara">A timelines implementation of smooth corrections</p></div></figcaption></figure></div><p class="Para">The simple solution to this error is to update the current position to <em class="EmphasisTypeItalic ">correctCurrentPos</em>, and this is in fact what the timelines model does by default.</p><p class="Para">Instead, we decide to smoothly move the avatar to the correct position over the next 200 ms. The avatar’s target position (<em class="EmphasisTypeItalic ">targetPos</em>) is determined by extrapolating 200 ms into the future. The avatar will move quickly over the next 200 ms to that position.</p><div class="Para">We will now describe in more detail, how this is accomplished using the timelines model. First, we need to save the current position before the update is applied, i.e., the avatar position at time 0. (This is necessary because inserting a new past value into the timeline will alter the current position.)<div id="Eque" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{currentPos=avatarPos\,(0);}} $$</div></div></div><div class="Para">Next, we place the fixup position (the position contained in the latest update message) into the timeline at the correct time. This allows us to estimate a target position we want to arrive at 200 ms in the future.<div id="Equf" class="Equation EquationMathjax"><div class="EquationContent">$$ \begin{aligned}&amp;{\texttt{avatarPos\,(fixupTime)=fixupPos;}}\\&amp;{\texttt{targetPos=avatarPos\,(200);}}\end{aligned} $$</div></div></div><div class="Para">Finally, we insert both the current position, and the target position into the timeline. (The assignment of the target position is necessary as its extrapolated value changes following the update of the current position.)<div id="Equg" class="Equation EquationMathjax"><div class="EquationContent">$$ \begin{aligned}&amp;{\texttt{avatarPos\,(0)=currentPos;}}\\&amp;{\texttt{avatarPos\,(200)=targetPos;}}\end{aligned} $$</div></div></div><p class="Para">The correction may be either a straight path toward the target position as shown in Fig. <span class="InternalRef"><a href="#Fig5">5</a></span>a, or if a nonlinear interpolation function is used, the correction will follow a curved path as in Fig. <span class="InternalRef"><a href="#Fig5">5</a></span>b.</p><div class="Para">This example illustrates how smooth corrections can be easily implemented using timelines. By default, the timeline remote update function inserts values from remote clients into the local copy of the timeline. This function would contain just one step:<div id="Equh" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{avatarPos\,(fixupTime)=fixupPos;}} $$</div></div></div><div class="Para">With the simple addition of four lines of code, the remote update function becomes:<div id="Equi" class="Equation EquationMathjax"><div class="EquationContent">$$ \begin{aligned}&amp;{\texttt{currentPos=avatarPos\,(0);}} \\ &amp; {\texttt{avatarPos\,(fixupTime)=fixupPos;}}\\&amp; {\texttt{targetPos=avatarPos\,(200);}}\\&amp;{\texttt{avatarPos\,(0)=currentPos;}}\\&amp;{\texttt{avatarPos\,(200)=targetPos;}}\end{aligned} $$</div></div>and we have implemented smooth corrections. Also, depending upon the form of interpolation and extrapolation functions used (linear or higher order) the correction may follow either a straight line or a curved path.</div><p class="Para">The key concept illustrated in this example is that by having the ability to modify a timeline, programmers are able to explicitly control the divergence of timelines between different clients. The remote client, where the avatar is being controlled, sees neither the error nor the correction.</p></div></section></div></section><section id="Sec12" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">4.2 </span>Example: delayed input techniques</h3><div class="content"><p class="Para">While dead reckoning is a predictive technique that can lead to inconsistencies in the game state, delayed input techniques such as local lag and bucket synchronization take the opposite approach. With these techniques, the goal is to reduce or eliminate inconsistencies by delaying local actions.</p><p class="Para">Players can often better coordinate their actions if they see the same changes to game state at the same time. Various algorithms have been developed that manipulate time to help synchronize players’ actions. Notable among these is local lag [<span class="CitationRef"><a href="#CR25">25</a></span>]. The key idea behind local lag is to delay the execution of local commands long enough that the commands have time to propagate to all remote sites and can then be executed simultaneously at all locations. Programming local lag is surprisingly tricky, requiring mechanisms for delaying inputs and for estimating message delivery time between the different nodes. It also requires a policy for handling messages that take longer than the lag constant to arrive.</p><p class="Para">Conversely, local lag is simple to implement using timelines. Consider again “Alice” and “Bob” from our previous example for dead reckoning. As before, Alice’s position is stored in the timeline <em class="EmphasisTypeItalic ">alicePos</em>. In this example, however, Alice’s client uses local lag to set positions in response to her movement commands. We will assume that the local lag constant is <em class="EmphasisTypeItalic ">DELAY</em>. That is, if Alice presses a key to move her avatar, there will be a delay of <em class="EmphasisTypeItalic ">DELAY</em> ms before she observes the movement associated with that key press. Bob should also observe the same movement <em class="EmphasisTypeItalic ">DELAY</em> ms after Alice pressed the key.</p><div class="Para">Thus, if Alice moves to a new position (<em class="EmphasisTypeItalic ">x, y</em>), the operation on Alice’s client to process the movement is simply:<div id="Equj" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{alicePos\,(DELAY)=(x, y);}} $$</div></div></div><p class="Para">That is, the position (<em class="EmphasisTypeItalic ">x, y</em>) is stored in the <em class="EmphasisTypeItalic ">alicePos</em> timeline <em class="EmphasisTypeItalic ">DELAY</em> ms in the future. For example, if <em class="EmphasisTypeItalic ">DELAY</em> = 100, then Alice’s position is set to (<em class="EmphasisTypeItalic ">x, y</em>), 100 ms in the future.</p><div class="Para">As before, Alice’s position is drawn on both clients as:<div id="Equk" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{DrawAvatar\,(alicePos(0));}} $$</div></div></div><p class="Para">That is, the avatar is drawn at its position at the current time.</p><p class="Para">This very simple code has a range of interesting effects. On Bob’s client, messages indicating Alice’s movements are automatically inserted into the timeline when they arrive. If the message took less than <em class="EmphasisTypeItalic ">DELAY</em> to arrive (hopefully the normal case), then on Bob’s remote client, the new position is inserted into the <em class="EmphasisTypeItalic ">alicePos</em> timeline in the future. For example, if <em class="EmphasisTypeItalic ">DELAY</em> = 100 and the message took 60 ms to arrive, the message is inserted into the <em class="EmphasisTypeItalic ">alicePos</em> timeline on Bob’s computer at <em class="EmphasisTypeItalic ">t</em> = 40. This allows the present position of Alice’s avatar to be interpolated (using previously recorded positions). Therefore, the local lag functionality supports smooth movements on remote clients without annoying corrections.</p><p class="Para">Alternatively, if the message took more than <em class="EmphasisTypeItalic ">DELAY</em> to arrive, say 130 ms, then the positional update is inserted into the <em class="EmphasisTypeItalic ">alicePos</em> timeline in the past (<em class="EmphasisTypeItalic ">t</em> = −30), and current positions are extrapolated from this (and possibly other) past values.</p><p class="Para">This simple example illustrates the power of the timelines model. Merely changing the time at which Alice’s position is set in the timeline allows a game developer to switch from dead reckoning to local lag. Also, the problems of synchronizing lag between different clients and of dealing with messages which take longer than the lag constant to arrive are handled automatically, requiring no code from the game programmer.</p></div></section><section id="Sec13" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">4.3 </span>Time-offsetting techniques</h3><div class="content"><p class="Para">Time-offsetting techniques render game entities at different times on different clients, typically displaying a delayed (or “time-offsetted”) version of remote players and objects. This approach is useful when designers believe it is better to provide an accurate representation of the timing of other players’ activities, even if that representation is delayed.</p><section id="Sec14" tabindex="-1" class="Section3 RenderAsSection3"><h4 class="Heading"><span class="HeadingNumber">4.3.1 </span>Example: remote lag</h4><div class="content"><div class="Para">One time-offsetting technique is the aiming mechanism used in the Half-Life series of games [<span class="CitationRef"><a href="#CR3">3</a></span>]. In shooting games, an authoritative central server is usually used to arbitrate when a shooting player has hit another target player. The simplest means to implement this is to have a single canonical game state and after a shot is fired, the server determines the location of the target player and whether or not a hit occurred. This can make aiming difficult because the shooter must predict where the other player’s avatar is going and aim ahead of it in order to get a hit (Fig. <span class="InternalRef"><a href="#Fig7">7</a></span>a).<figure class="Figure" id="Fig7"><div class="MediaObject" id="MO18"><a href="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig7_HTML.gif" target="_blank" rel="noopener noreferrer"><span class="u-screenreader-only">Open image in new window</span><img src="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig7_HTML.gif" alt=""></img></a></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Fig. 7</span><p class="SimplePara">Shooting often requires players to “lead”, guessing where the target actually is (<strong class="EmphasisTypeBold ">a</strong>). The Half-Life algorithm allows players to shoot at the target where they see it (<strong class="EmphasisTypeBold ">b</strong>)</p></div></figcaption></figure></div><p class="Para">In the Half-Life series of games, each client applies a constant lag to the actions of other players and the server arbitrates hit decisions based on the state of the shooter’s client at the time the shot was made (Fig. <span class="InternalRef"><a href="#Fig7">7</a></span>b). This means that the shooter can aim directly at the target player. However, implementing this mechanism can be complex as it requires the server to be capable of unwinding time in order to determine the position of the target avatar on the shooter’s client at the time the shot was fired. Since the lag is applied only to remote avatars, each client’s frame of reference is different.</p><div class="Para">Figure <span class="InternalRef"><a href="#Fig8">8</a></span> shows how timelines are used to solve this targeting problem. First, we will look at how timelines are used to easily render a current version of the local avatar and a time-delayed version of the remote avatar. We assume that we have two timelines <em class="EmphasisTypeItalic ">avatar1</em> and <em class="EmphasisTypeItalic ">avatar2</em>. These timelines will contain the position of the avatar, the direction it is aiming and an indication of whether or not the avatar is shooting. Without loss of generality, we assume that <em class="EmphasisTypeItalic ">avatar1</em> is currently shooting at <em class="EmphasisTypeItalic ">avatar2</em>. These two timelines are shared by two clients and a central server. When players perform input actions, the appropriate timelines are updated at time 0. Thus, if player 1’s avatar has moved to position (<em class="EmphasisTypeItalic ">x, y</em>), is aiming in direction (<em class="EmphasisTypeItalic ">aim_x,aim_y</em>) and is shooting, then the avatar state is set as follows:<div id="Equl" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{avatar1\,(0) = (x, y, aim\_x, aim\_y, TRUE);}} $$</div></div><figure class="Figure" id="Fig8"><div class="MediaObject" id="MO20"><a href="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig8_HTML.gif" target="_blank" rel="noopener noreferrer"><span class="u-screenreader-only">Open image in new window</span><img src="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig8_HTML.gif" alt=""></img></a></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Fig. 8</span><p class="SimplePara">A timelines approach to implementing Half-Life’s hit determination code</p></div></figcaption></figure></div><div class="Para">When rendering the avatars, we want to display the local avatar at the current time, but display a delayed version of the remote player’s avatar. Thus, assuming that the amount of delay to be applied to the remote avatar is <em class="EmphasisTypeItalic ">REMOTE_LAG</em>, then, on player 1’s client, the avatars are drawn as:<div id="Equm" class="Equation EquationMathjax"><div class="EquationContent">$$ \begin{aligned}&amp;{\texttt{DrawAvatar\,(avatar1 (0));}}\\ &amp;{\texttt{DrawAvatar\,(avatar2(-REMOTE\_LAG));}}\end{aligned} $$</div></div></div><p class="Para">Now we will look at how timelines can be used to allow the server to determine whether or not player 1 was aiming at player 2 when he fired. First, we will need to know the length of time required for a message to travel from the client to the server. If we assume that a message takes <em class="EmphasisTypeItalic ">L</em> ms to arrive at the server. Then, the server must make the hit decision based on the state of the shooter (<em class="EmphasisTypeItalic ">avatar1</em>) at time −<em class="EmphasisTypeItalic ">L</em> (when the message was sent) versus the state of the target (<em class="EmphasisTypeItalic ">avatar2</em>) at time –<em class="EmphasisTypeItalic ">L—REMOTE_LAG</em> (where the shooter believed the target was at time −<em class="EmphasisTypeItalic ">L</em>).</p><div class="Para">Periodically, the server checks the <em class="EmphasisTypeItalic ">avatar1</em> timeline to see whether a shot has been fired. The time of the last known shooter status is queried and saved to <em class="EmphasisTypeItalic ">t</em>. The state of the shooter at that time is retrieved, and used to determine whether the shooter was firing his weapon at that time:<div id="Equn" class="Equation EquationMathjax"><div class="EquationContent">$$ \begin{aligned} &amp; {\texttt{t=LastKnownTime\,(avatar1);}} \\ &amp; {\texttt{shooter=avatar1(t);}} \\ &amp; {\texttt{if(shooter.IsShooting)\ldots}} \\ \end{aligned} $$</div></div></div><div class="Para">If the player was shooting, the server then determines the state of the target player at the time of firing, as viewed by the shooter. This is done by subtracting the amount of remote lag from the time the shot was fired, and retrieving the target state at that time:<div id="Equo" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{target=avatar2\,(t-REMOTE\_LAG);}} $$</div></div></div><div class="Para">Finally a <em class="EmphasisTypeItalic ">TargetHit</em> function uses the avatars’ positions and shooter’s direction to determine whether the target avatar was hit. If the target was hit, its health points are decremented.<div id="Equp" class="Equation EquationMathjax"><div class="EquationContent">$$ \begin{aligned} &amp; {\texttt{if\,(TargetHit (shooter.Position, shooter.Heading, target.Position))}} \\ &amp; \texttt{\{} \\ &amp; \quad \quad {\texttt{targetHealth(0) = targetHealth(0) - 1;}} \\ &amp; \texttt{\}} \\ \end{aligned} $$</div></div></div><p class="Para">Thus, the server needs to take account of the shooter’s frame of reference when a shot was made to determine whether or not the shot hit the target. To do this, the server must reconstruct the state of the shooter’s client at the time of the shot. This requires the server to access the state of the shooter at the time the shot was fired and to access the state of the target at the point in time prior to the shot corresponding to what the shooter saw. The timeline model’s ease of accessing these past states makes this straightforward. A past state can be retrieved from a timeline by simply specifying the time at which the data is needed. Thus, for the server to determine if a hit occurred all that is required is to know the time at which the shot was fired and the time delay associated with the target.</p></div></section><section id="Sec15" tabindex="-1" class="Section3 RenderAsSection3"><h4 class="Heading"><span class="HeadingNumber">4.3.2 </span>Example: local perception filters</h4><div class="content"><p class="Para">Local perception filters [<span class="CitationRef"><a href="#CR32">32</a></span>] is another example of a lag compensation algorithm based on time offsets. The key idea is to continually adjust the amount of delay applied to non-player controlled entities depending upon their position relative to the local player’s avatar. Despite the approach’s great promise, we are aware of no games using local perception filters. We conjecture that this may be due to the difficulty of implementing it using standard programming tools, making it difficult to for developers to quickly evaluate how well the approach works in their game. As we shall show, the timelines model makes the implementation of local perception filters tractable, opening its application to distributed game physics.</p><div class="Para">We first describe the local perception filters algorithm, and then show how it can be implemented using timelines. We begin by looking at a single object whose motion is determined by a physics engine, for example in the simple soccer game as shown in Fig. <span class="InternalRef"><a href="#Fig9">9</a></span>. Through this example we highlight some of the shortcomings of other more commonly used lag compensation techniques. In the soccer game, two players kick a ball about in a 2-D world. The players are free to move their avatars around the world, and a physics simulation is used to determine the position of the ball. Ideally, both players would see the ball in the same position, and the ball would react instantly when it is kicked. However, due to network latency, this is not possible. Delayed input techniques such as local lag would provide the desired consistent view, but the local player would experience reduced responsiveness as local lag causes a delay between kicking the ball and seeing it move. Predictive techniques provide fast response times, but extrapolated positions are often inaccurate, particularly when the avatar changes direction or the ball is kicked. In the presence of physics, such inaccuracies can be highly visible.<figure class="Figure" id="Fig9"><div class="MediaObject" id="MO25"><a href="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig9_HTML.gif" target="_blank" rel="noopener noreferrer"><span class="u-screenreader-only">Open image in new window</span><img src="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig9_HTML.gif" alt=""></img></a></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Fig. 9</span><p class="SimplePara">When using local perception filters, the time used to retrieve the ball’s position changes relative to the local and the remote players</p></div></figcaption></figure></div><p class="Para">Remote lag (as described above) applies a delay to the remote player’s avatar and renders the local avatar in real-time. This provides immediate responsiveness for the local player. Since the position of the remote avatar is time-delayed, positional updates are treated as future values, allowing positions to be interpolated on the local client, providing smoother animation. Because the ball travels between the two players’ avatars, when the remote avatar kicks the ball, the ball’s motion must be delayed by the same amount of time as the remote avatar. Otherwise, the interactions between the player and the ball would appear unrealistic. However, when the ball is near the local player’s avatar, it must move in real-time, or again the interactions would appear unrealistic. Local perception filters balance this by adjusting the ball’s delay depending upon its position relative to the two avatars. For example, if the remote player’s avatar is delayed by 100 ms, the ball is also delayed by 100 ms when it is next to the remote player’s avatar, by 50 ms when it is halfway between the two avatars and by 0 ms when it is near the local player’s avatar. This provides the local player with fast response times when he kicks the ball. It also allows him to view realistic interactions when the remote avatar kicks the ball.</p><p class="Para">To implement this example, a developer, therefore, needs to continually adjust the delay associated with the ball as it moves relative to the positions of the avatars. As an additional complication, the physics simulation for the ball must be carried out on the client whose avatar is closest to the ball. The delay in rendering the ball on the other client provides sufficient time for the ball’s position to be transmitted over the network. In sum, to implement this simple game using local perception filters, the programmer must maintain different timeframes for both players, to adjust these timeframes dynamically, and to implement a distributed physics simulation with dynamic change of simulation host.</p><div class="Para">Timelines make this implementation tractable because they allow the programmer to easily access the state of an object at any point in time. Specifically, we use timelines to:<div class="UnorderedList"><ul class="UnorderedListMarkBullet"><li><p class="Para">pass the right to calculate the position of the ball using the physics simulation;</p></li><li><p class="Para">determine the time delay for the ball; and</p></li><li><p class="Para">determine the time delay for the other player’s avatar.</p></li></ul></div></div><p class="Para">In our example, we assume a client–server architecture with two clients each running a physics simulation to determine the position of the ball. The server uses the ball and player position information to arbitrate which player is controlling the updates to the ball position.</p><p class="Para">To illustrate how timelines can be used to implement local perception filters, we require three timelines: <em class="EmphasisTypeItalic ">player1Pos</em>, <em class="EmphasisTypeItalic ">player2Pos</em> and <em class="EmphasisTypeItalic ">ballPos</em> representing the positions of the three game entities. We also require one additional timeline, <em class="EmphasisTypeItalic ">ballControl</em>, that indicates which player is controlling the physics simulation for the ball and updating the <em class="EmphasisTypeItalic ">ballPos</em> timeline. The <em class="EmphasisTypeItalic ">ballControl</em> timeline contains discrete values, and thus uses stepping interpolation/extrapolation.</p><div class="Para">The server receives updates for the player and ball positions from each client and then, based on the distances of each player from the ball, determines which player should be updating the ball position. The server then sets this information in the <em class="EmphasisTypeItalic ">ballControl</em> timeline.<div id="Equq" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{ballControl(0)=Player1;}} $$</div></div></div><div class="Para">The following steps then occur on each player’s computer. Here we describe the steps assuming that player 1 is the local player. Then, on player 1’s computer, the client checks the value in the <em class="EmphasisTypeItalic ">ballControl</em> timeline. If player 1 is controlling the ball, his client calculates the new ball position and sets that value in the <em class="EmphasisTypeItalic ">ballPos</em> time-line. If player 2 is controlling the ball, player 1’s client does nothing as it will be able to get values from the timeline that are set by player 2’s client. Thus, assuming <em class="EmphasisTypeItalic ">getUpdatedBallPos</em> is a method that updates the ball position and then returns that updated position, the code for adding new values to the timeline is:<div id="Equr" class="Equation EquationMathjax"><div class="EquationContent">$$ \begin{aligned} &amp; {\texttt{if\,(ballControl(0) == myPlayerNumber)}} \\ &amp; \texttt{\{} \\ &amp; \quad \quad {\texttt{ballPos(0) = getUpdatedBallPos();}} \\ &amp; \texttt{\}} \\ \end{aligned} $$</div></div></div><p class="Para">Next, to draw the ball in the correct position, the players must determine the delay to apply to the ball.</p><div class="Para">Assuming again that player 1 is the local player, then player 2’s avatar is drawn at <em class="EmphasisTypeItalic ">DELAY</em> ms in the past. His avatar’s position will be:<div id="Equs" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{player2Pos\,(-DELAY);}} $$</div></div>and the local player’s avatar (player 1) is drawn at:<div id="Equt" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{player1Pos(0);}} $$</div></div></div><div class="Para">To estimate the ball’s position, we use the position where it was last drawn as a first approximation. We will assume this value has been stored in a variable called <em class="EmphasisTypeItalic ">prevBall</em>. Then, assuming that the lag applied to the ball is linear depending upon the distance between it and the two players’ avatars, we can calculate the <em class="EmphasisTypeItalic ">ballDelay</em> as follows:<div id="Equu" class="Equation EquationMathjax"><div class="EquationContent">$$ \begin{aligned} &amp; {\texttt{d1=length\,(player1Pos\,(0) - prevBall);}} \\ &amp; {\texttt{d2=length\,(player2Pos\,(-DELAY) - prevBall);}} \\ &amp; {\texttt{ballDelay=DELAY * d1/(d1+d2);}} \\ \end{aligned} $$</div></div></div><div class="Para">Then the ball position to be rendered is:<div id="Equv" class="Equation EquationMathjax"><div class="EquationContent">$$ {\texttt{ballPos(-ballDelay);}} $$</div></div></div><p class="Para">This example illustrates how timelines’ ability to access entity positions at any point in time has allowed us to easily change the timeframe of the ball each time it is rendered. It also shows how it is possible to allow multiple clients to coordinate updates on shared state data. Given the ease with which local perception filters can be implemented with timelines, it becomes practical to assess their suitability for games under development.</p></div></section></div></section><section id="Sec16" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">4.4 </span>Using timelines: summing up</h3><div class="content"><p class="Para">This section has argued that lag compensation algorithms fall into the three classes of predictive, delayed input and time-offsetting techniques. We have shown that timelines can be used to express representative algorithms drawn from all three of these techniques. We have shown that complex algorithms can be expressed with very little code, making it tractable for developers to experiment with complex and novel lag compensation schemes.</p></div></section></div></section><section id="Sec17" tabindex="-1" class="Section1 RenderAsSection1"><h2 class="Heading"><span class="HeadingNumber">5 </span>Implementing timelines</h2><div class="content"><p class="Para">The previous section showed how timelines’ explicit treatment of time provides the necessary infrastructure for implementing many of the lag compensation techniques used in multiplayer games. We now discuss how timelines are implemented within our Janus toolkit. Janus provides a low-overhead implementation of timelines with a simple API. The toolkit is named after Janus, the Roman god of gates, doorways, beginnings and endings. Janus also had the ability to see into both the past and the future, just as users of the Janus toolkit are able to access previous and future versions of the game’s state.</p><p class="Para">The Janus toolkit is written in C# and is compatible with any .NET language. It is built on top of the Lidgren Networking Library (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://code.google.com/p/lidgren-network-gen3"><span class="RefSource">http://code.google.com/p/lidgren-network-gen3</span></a></span>), which provides reliable UDP messaging.</p><section id="Sec18" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">5.1 </span>Object model</h3><div class="content"><p class="Para">Within Janus, timelines are implemented as objects descended from the Timeline class. Each timeline has a base type (the type of the timeline state) and methods implementing interpolation, extrapolation and remote update handling. The default values of these methods can be overridden to create arbitrary timeline types. Timeline objects also provide Get and Set methods for retrieving/modifying the timeline’s state.</p><p class="Para">Each timeline object has a string identifier. If two clients create timelines with the same identifier, those timelines are automatically synchronized. As shown in Fig. <span class="InternalRef"><a href="#Fig4">4</a></span>, whenever a new value is added to a timeline, an update is sent over the network to the client’s remote peers. When the remote update is received, it is applied to the timeline via its remote update handling function. By default, this function simply inserts the new state into the timeline at the correct time and removes any later values in the timeline. As we have seen, overriding this function can allow easy programming of interesting behaviors, such as the smooth corrections of Sect. <span class="InternalRef"><a href="#Sec11">4.1.2</a></span>.</p><p class="Para">Known timeline states (i.e., those that have been inserted into the timeline with the Set method) are simply organized into a doubly linked list, where each state is tagged by its time. The shared state object may be as simple as a single integer, or it may be any arbitrarily complex object containing multiple properties. We have created a variety of standard timeline objects including an integer, a floating point number, 2-D and 3-D position vectors and more complex objects combining position, heading and velocity. Users of the toolkit can either use these existing timeline objects or create a new type of timeline object.</p><p class="Para">Although the time values stored in the linked list are real times (measured in milliseconds since the epoch), the programmer always accesses states using relative time, where zero (0) means now, +10 represents 10 ms in the future, and −10 represents 10 ms in the past.</p></div></section><section id="Sec19" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">5.2 </span>Interpolation and extrapolation</h3><div class="content"><p class="Para">A timeline’s Get method is used to retrieve its state at a given time (past, present or future). The Get method uses the timeline’s interpolation and extrapolation functions as necessary to provide values at times when none is known. Default implementations of linear and stepwise interpolation/extrapolation are provided, and developers can create additional functions to provide domain-specific behaviors. For example, with the dead reckoning, the extrapolation function may be either first order (based on position and velocity) or second order (based on position, velocity and change in either speed or direction). The function may also be based upon only the most recent update, or it may be based upon two or more previous states. Our timelines implementation supports the use of a variety of extrapolation (and interpolation) functions, and thus all these options are possible merely by selecting a different extrapolation function. Which form of extrapolation function is most suitable depends upon both the type of game and the type of motion [<span class="CitationRef"><a href="#CR27">27</a></span>]. With timelines, the choice of function can be modified at runtime, thus facilitating adaptive techniques such as the use of position-based history [<span class="CitationRef"><a href="#CR33">33</a></span>] where the extrapolation function changes based on the motion of the entity.</p></div></section><section id="Sec20" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">5.3 </span>Distribution and networking</h3><div class="content"><p class="Para">From the developer’s point of view, Janus has a peer-to-peer architecture. That is, updates are automatically broadcast to all peers that share the same timeline, and all data is fully replicated. If a server is required (as with our targeting and shooting example of Fig. <span class="InternalRef"><a href="#Fig8">8</a></span>), one of the peers can be allocated a server role.</p><p class="Para">In the current implementation of Janus, we have developed a centralized message router to implement this peer-to-peer communication. The router is based on a distributed publish and subscribe architecture [<span class="CitationRef"><a href="#CR11">11</a></span>]. As indicated previously, a string identifier is associated with each instance of a timeline object. When a client creates a timeline object with a given identifier, the identifier is passed to the message router and the client automatically subscribes to updates for that object. When a client stores a new value in a timeline object using its Set method, the value and the time associated with it are sent to the message router which forwards the data to all other clients who have subscribed to that timeline object.</p><p class="Para">By default, the Janus Toolkit does little to minimize the number and size of messages passed between clients. However, several features are available that dramatically reduce bandwidth requirements of applications using the toolkit. First, the programmer can set a minimum time interval between updates. Thus, not all changes to the local timeline are propagated over the network. For example if the local client updates positions every 20 ms and the minimum time interval for sending updates is set to 60 ms, then only one-third of the updates are sent. Second, each client continually keeps track of which values have actually been sent over the network. Then, prior to sending an update, the client performs a check to determine whether or not remote clients can accurately predict the new updated state. Only if the remote client is unable to predict the new state within a set error threshold will the new state be transmitted. By setting the size of the error threshold, the programmer can control the fraction of messages that are sent. Auto-adaptive dead reckoning schemes [<span class="CitationRef"><a href="#CR5">5</a></span>] can also be implemented by adjusting the error threshold depending upon the game situation or factors such as network congestion and bandwidth availability.</p><p class="Para">Finally, the programmer is able to optimize the size and format of messages. By default, Janus uses object serialization to convert objects to a byte array for transmission over the network. This has the advantage of making it simple to create new timeline classes without the need to worry about how the data is transmitted. However, the built in object serialization can generate unnecessarily large messages. Programmers can override the default serialization methods, and are thus able to optimally format the messages passed.</p><p class="Para">To support synchronization, Janus uses a global clock. Determining and maintaining a global clock on all clients can be a daunting task due to clock drift, network latency and jitter. We have implemented our global clock using the Berkeley algorithm [<span class="CitationRef"><a href="#CR16">16</a></span>]. In our implementation, the message router periodically sends timing messages to all clients. The message router analyzes the timing messages returned from the client, discarding any outliers and then sends updates to the global time back to the client.</p></div></section><section id="Sec21" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">5.4 </span>Alternative architectures</h3><div class="content"><div class="Para">The timeline model does not impose any specific architecture on the game. In the Janus toolkit, we chose to implement a message broadcasting underlay with a peer-to-peer overlay. The decision to use a central message router was made purely for simplicity of implementation, and could be replaced by true peer-to-peer message broadcasting techniques. This implementation easily supports a variety of overlay architectures. As shown in Fig. <span class="InternalRef"><a href="#Fig10">10</a></span>, the message communication architecture is determined by the topology of clients’ subscriptions to timeline objects. Figure <span class="InternalRef"><a href="#Fig10">10</a></span>a shows a peer-to-peer overlay where each client (C1 and C2) subscribes to updates for all timelines (TL1 and TL2). In the client–server model shown in Fig. <span class="InternalRef"><a href="#Fig10">10</a></span>b, each client shares a timeline only with the server. That is, client C1 updates timeline TL1 and the message router only propagates those updates to the server S1. Similarly, client C2 updates timeline TL2 and the message router only propagates those updates to the server S1. Timelines TL3 and TL4 are both updated by the server and the updates for these timelines are forwarded to both clients. In the hybrid model in Fig. <span class="InternalRef"><a href="#Fig10">10</a></span>c, timelines TL1 and TL2 are shared only between one client and the server, while timelines TL3 and TL4 are shared between the two clients and timeline TL5 is shared by all.<figure class="Figure" id="Fig10"><div class="MediaObject" id="MO32"><a href="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig10_HTML.gif" target="_blank" rel="noopener noreferrer"><span class="u-screenreader-only">Open image in new window</span><img src="https://static-content.springer.com/image/art%3A10.1007%2Fs00530-012-0271-3/MediaObjects/530_2012_271_Fig10_HTML.gif" alt=""></img></a></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Fig. 10</span><p class="SimplePara">The Janus toolkit allows for a variety of overlay architectures including peer-to-peer, client–server and a hybrid model depending upon the subscription list for each timeline</p></div></figcaption></figure></div></div></section></div></section><section id="Sec22" tabindex="-1" class="Section1 RenderAsSection1"><h2 class="Heading"><span class="HeadingNumber">6 </span>Background and related work</h2><div class="content"><p class="Para">We have shown that by making time an integral part of the programming model, timelines have simplified the implementation of lag compensation techniques used in multiplayer games. To place this work in context, we now look at the support provided by existing game networking libraries for time-based programming, and then review other programming environments which incorporate time.</p><section id="Sec23" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">6.1 </span>Networking support for multiplayer games</h3><div class="content"><p class="Para">Existing game networking toolkits provide only limited support for manipulating time, contributing to the difficulty of implementing many lag compensation algorithms. Zoid-Com (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://zoidcom.com"><span class="RefSource">http://zoidcom.com</span></a></span>) includes a special replicator that implements client side prediction, dead reckoning/extrapolation, interpolation, movement correction and local overrides. As we have seen, interpolation and extrapolation are important to programming lag compensation algorithms, but are not sufficient to fully solve the problems discussed in Sect. <span class="InternalRef"><a href="#Sec2">2</a></span>, particularly the frame of reference or multiple-times at-once problems.</p><p class="Para">OpenTNL (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://opentnl.org"><span class="RefSource">http://opentnl.org</span></a></span>) also includes mechanisms for interpolation and extrapolation of object positions. Net-Z (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://quazal.com"><span class="RefSource">http://quazal.com</span></a></span>) provides two models for shared objects: attribute propagation which uses data extrapolation to reduce bandwidth requirements, and step-by-step synchronization. Other game networking libraries such as ClanLib (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://clanlib.org"><span class="RefSource">http://clanlib.org</span></a></span>), Nevrax/NEL (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://opennel.org"><span class="RefSource">http://opennel.org</span></a></span>), OpenSkies (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://openskies.net"><span class="RefSource">http://openskies.net</span></a></span>), RakNet (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://www.raknet.net"><span class="RefSource">http://www.raknet.net</span></a></span>) and ReplicaNet (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://replicanet.com"><span class="RefSource">http://replicanet.com</span></a></span>) provide basic networking services and include object replication, NAT punchthrough, message reliability and techniques for reducing bandwidth requirements. However, they provide little or no support for interpolation and extrapolation of shared data objects.</p><p class="Para">As game networking libraries provide limited support for programming with time, we look to other programming environments that have integrated time into the programming model.</p></div></section><section id="Sec24" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">6.2 </span>Other programming environments for managing time</h3><div class="content"><p class="Para">A number of programming languages explicitly incorporate time. Dataflow programming languages (such as Lucid [<span class="CitationRef"><a href="#CR2">2</a></span>]) represent variables and expressions as an infinite series of data objects as opposed to single values. In dataflow languages, variables move sequentially from one state to the next; however, there is no mechanism for accessing an arbitrary state in the past or future. Constraint imperative languages extend dataflow languages to express temporal constraints in user interfaces [<span class="CitationRef"><a href="#CR14">14</a></span>], but again do not permit manipulation of past or future states.</p><p class="Para">The field of animation has a long history of managing variables that evolve over time. Myers et al. [<span class="CitationRef"><a href="#CR26">26</a></span>] have shown how constraints can be used to create animated interfaces. However, this work provides no notion of attributes existing as a continuous series of values and it does not support extrapolation beyond the ending values.</p><p class="Para">A variety of commercial languages are available which manage some notion of time. Quicktime (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://bit.ly/cH6hVk"><span class="RefSource">http://bit.ly/cH6hVk</span></a></span>) provides extensive support for time-based media. Toolkits such as Adobe Flash (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://www.adobe.com"><span class="RefSource">http://www.adobe.com</span></a></span>), Core Animation (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://bit.ly/a3B1z3"><span class="RefSource">http://bit.ly/a3B1z3</span></a></span>) and Windows Presentation Foundation (WPF) (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://bit.ly/kFqqE"><span class="RefSource">http://bit.ly/kFqqE</span></a></span>) provide explicit access to time to help create animations. They allow attributes of an object (such as position or color) to be set at two points in time. It is then possible to access interpolated values at any point in time between these start and end points. However, the programmer is limited to accessing data from one point in the animation at a time, and there is no notion of sharing these animations between participants connected by a network.</p><p class="Para">Spatio-temporal databases [<span class="CitationRef"><a href="#CR28">28</a></span>] capture spatial and temporal aspects of data and deal with the position and/or geometry of objects changing over time. Spatio-temporal databases support queries about time, temporal properties, and temporal relationships allowing data to be accessible at any point in time. As well, data from multiple points in time may be accessed within the same query. We were able to draw from some of these concepts. However, the concept of embedding a database is impractical for real-time games where local replication and immediate access is required.</p><p class="Para">Calculating changes in shared state over time is a fundamental concept in distributed simulation [<span class="CitationRef"><a href="#CR15">15</a></span>]. Either a time stepped or an event-driven execution model may be used. Standards such as the IEEE standard for High Level Architecture [<span class="CitationRef"><a href="#CR19">19</a></span>] provide a protocol for object model interoperability which includes a time dimension and specifications for extrapolation (dead reckoning).</p><p class="Para">Timelines are perhaps closest to the programming abstractions offered by process historians such as OSISoft’s PI System (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://osisoft.com"><span class="RefSource">http://osisoft.com</span></a></span>) and AspenTech’s InfoPlus.21 (<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://aspentech.com"><span class="RefSource">http://aspentech.com</span></a></span>). These are used in the process control industry to store time series data and events. The APIs for these systems implement many of the principals required for programming with state and time including the ability to set and get values for any arbitrary time and automatically interpolate values between time intervals. Data can be accessed using either absolute or relative time. Process historians are tuned for the very different domain of process control, and are not designed for use in distributed systems.</p><p class="Para">These tools and programming languages introduce a variety of concepts for manipulating data which changes over time. Our work extends the temporal components found in these environments by applying them to shared data in a networking toolkit. Specifically, our timelines model combines the ability of Flash and WPF to index variables by time, and the ability of spatio-temporal databases and process historians to set and query data at arbitrary times in the past and future, and applies these concepts to shared state data of the form used by networked games.</p><p class="Para">To the best of our knowledge, our timelines model and its implementation in the Janus toolkit is unique. It is the first programming model for shared state data that integrates time and state. By making time an explicit dimension of shared data objects, the timelines model makes it considerably easier to express a wide range of lag compensation algorithms used in multiplayer games.</p></div></section></div></section><section id="Sec25" tabindex="-1" class="Section1 RenderAsSection1"><h2 class="Heading"><span class="HeadingNumber">7 </span>Discussion</h2><div class="content"><p class="Para">We now describe our experience using timelines, and the strengths and limitations of this programming model.</p><section id="Sec26" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">7.1 </span>Experience</h3><div class="content"><p class="Para">Despite its status as a research prototype, the Janus toolkit has been used by the authors and other developers to experiment with a variety of lag compensation algorithms and to create several multiplayer games based on Microsoft’s XNA game development library. The games include the Balloon Burst, Truck Pull and Pedal Race exergames [<span class="CitationRef"><a href="#CR35">35</a></span>], the Eliminate 3-D first-person shooter, the Speed Demons racing game, the Growl Patrol ubiquitous game [<span class="CitationRef"><a href="#CR23">23</a></span>], and the Liberi persistent world building game [<span class="CitationRef"><a href="#CR18">18</a></span>]. The toolkit has also been used to implement the OrMiS tabletop military simulation tool [<span class="CitationRef"><a href="#CR29">29</a></span>].</p><p class="Para">These games were developed by ten developers, none of whom were authors of Janus itself. All were students, ranging from undergraduate to Ph.D. level, and most had only passing experience with distributed systems programming. Despite this, they all reported finding it straightforward to implement networking using the Janus toolkit. For Balloon Burst, Truck Pull, Pedal Race, Growl Patrol and OrMiS, the time to incorporate networking was measured in hours. Liberi had difficult performance requirements due to its basis in a large, fully deformable world. For Liberi, Janus was used to implement interest management and distributed physics algorithms. Despite this, it was still just a matter of a few weeks to implement multiplayer support.</p><p class="Para">The developers using the Janus toolkit were primarily interested in creating simple networked games to be played over a local area network. They have mainly relied on prediction or local lag or a combination of these two techniques. The one exception was a fourth year undergraduate student who implemented three games for the purpose of evaluating the effect of different lag compensation techniques on player experience and performance. With each of these three games it was possible to switch between local lag, remote lag and prediction during game play. Also, the smooth correction technique was implemented in each game.</p><p class="Para">Although smooth corrections are relatively simple to implement with the Janus toolkit, most developers chose to not incorporate this technique in their games. One possible reason is that the games were only played over a local area network and thus jarring corrections were not an issue. Incorporating smooth corrections as the default behavior for the remote update function for the standard timeline classes provided with Janus would increase the use of this technique even for the most novice developers.</p><p class="Para">With Janus, we have largely focused on the development of multiplayer games. However, timelines can readily be applied to distributed simulation and to groupware applications such as shared editors and drawing tools or chat applications [<span class="CitationRef"><a href="#CR30">30</a></span>].</p><p class="Para">Our experience indicates that timelines can make it easy to implement basic networking in multiplayer games. As we have seen, timelines also make it tractable to implement sophisticated algorithms. For example, we have experimented with the combination of the local perception filters [<span class="CitationRef"><a href="#CR32">32</a></span>] algorithm with smooth corrections [<span class="CitationRef"><a href="#CR34">34</a></span>] to provide a novel solution to the distributed physics problem. Thus far, we have created a credible simulation involving up to four players interacting with tens of objects over networks with up to 100 ms of latency. We are continuing to work on increasing the number of players and objects.</p><p class="Para">From this experience, we anticipate that the largest benefit of timelines is that they enable developers to quickly assess the benefits of different algorithms, to create new algorithms, and to combine existing algorithms in novel ways. While in theory such work is possible with traditional techniques, it is not always practical to do so given the hectic timeframes of commercial game development.</p></div></section><section id="Sec27" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">7.2 </span>Player experience</h3><div class="content"><p class="Para">Advanced lag compensation techniques show great promise for improving user experience while playing games. For example, in the Half-Life series of games [<span class="CitationRef"><a href="#CR3">3</a></span>], remote lag improves both player experience and performance by allowing players to aim directly at their targets, and the bucket synchronization algorithm was key to the implementation of Age of Empires [<span class="CitationRef"><a href="#CR4">4</a></span>]. However, it is not always clear which techniques provide the best fit for which game situations. As shown by work by Stuckel and Gutwin [<span class="CitationRef"><a href="#CR36">36</a></span>], Pantel and Wolf [<span class="CitationRef"><a href="#CR27">27</a></span>], Zhao et al. [<span class="CitationRef"><a href="#CR37">37</a></span>] and ourselves [<span class="CitationRef"><a href="#CR31">31</a></span>], the algorithms must be tested and then evaluated to determine their effect. To do this, the developer must select an algorithm, implement it and then evaluate its impact on player performance and experience in a range of game situations. If the technique is too difficult or cumbersome to implement, this creates a significant barrier to doing such evaluations. For example, local perception filters [<span class="CitationRef"><a href="#CR32">32</a></span>] first appeared in the literature in 1998, but (prior to the efforts reported in this paper) have never been implemented in any multiplayer game. Timelines make the implementation of these techniques tractable and thus can allow developers to experiment with different techniques and tailor the techniques used to specific situations within a game.</p></div></section><section id="Sec28" tabindex="-1" class="Section2 RenderAsSection2"><h3 class="Heading"><span class="HeadingNumber">7.3 </span>Strengths and limitations</h3><div class="content"><p class="Para">The power of the timelines model lies in its explicit treatment of time. Automatic interpolation and extrapolation mechanisms allow programmers to easily access shared state data from any point in the past or future. This technique is powerful for manipulating shared data, although it is not without limitations. In our example of implementing local perception filters, we have shown how two clients can coordinate updating a single timeline representing the ball position. In general, however, the current timeline implementation does not support multiple clients updating the same timeline, as the updates from one client by default can overwrite updates made by the other client. Overriding the default remote update function can solve this synchronization issue; however, to-date this has been left to the developer using the toolkit to provide the implementation. In future versions of the Janus toolkit, we will provide a variety of options for remote update handling that will support synchronization techniques such as time warp [<span class="CitationRef"><a href="#CR22">22</a></span>], optimistic synchronization protocols [<span class="CitationRef"><a href="#CR12">12</a></span>], conflict merging and/or operational transform [<span class="CitationRef"><a href="#CR10">10</a></span>].</p><p class="Para">By default, timelines require the entire shared object to be sent over the network for each update. This makes them unsuitable for large data structures. We have begun to explore how timelines can be made more efficient by sending only changes to the shared state, as opposed to sending the entire object. Using customized serialization methods we are able to transmit only the portions of the data structure that have changed. Further work is required to generalize this solution for all timelines objects.</p><p class="Para">We have shown how the timelines model makes it easy to access shared state data at any point in time. However, the same is not true for command type data, such as “shoot” or “crouch”. There is no method to interpolate or extrapolate these types of actions and thus each command must be accessed individually. We have experimented with various options for integrating commands into our timelines model. Some options include, allowing the programmer to access a list of commands that occurred over a time range, or using an event-driven model for commands, possibly delaying events based on the command timestamp.</p><p class="Para">Our implementation of the global clock has been used successfully to synchronize clients on a variety of computers. We have found that over the local area network we are able to synchronize the clocks generally within a few milliseconds. Testing over wide area networks indicates that clock synchronization within the small tens of milliseconds is achievable. A more sophisticated algorithm may be required under conditions involving higher network latency and jitter. Also, we have not yet implemented safeguards to ensure that changes to the clock occur gradually and that the clock cannot move backward. We have not seen a need for such safeguards in our studies to-date, but this may require consideration in the future.</p><p class="Para">The amount of memory used by our implementation represents an area for future optimization. Currently all values that are set are stored in the timeline, possibly requiring large memory. Janus currently truncates history to limit storage requirements. We plan to adapt algorithms for compacting history developed for solving the groupware latecomer problem [<span class="CitationRef"><a href="#CR6">6</a></span>], and mechanisms for compressing messages [<span class="CitationRef"><a href="#CR17">17</a></span>].</p><p class="Para">Timelines provide a novel programming model. For programmers familiar with message passing techniques, the shift to thinking about a shared state model indexable by time can be significant, perhaps analogous to the shift from procedural to object oriented programming. We have found that developers who dive into the model without carefully studying its documentation and examples make the mistake of trying to treat it like a message passing system. As with all novel programming models, developers need to adjust to the model’s way of thinking.</p></div></section></div></section><section id="Sec29" tabindex="-1" class="Section1 RenderAsSection1"><h2 class="Heading"><span class="HeadingNumber">8 </span>Conclusion</h2><div class="content"><p class="Para">In this paper we have presented the timelines programming model for lag compensation in networked games. Timelines facilitate the implementation of a variety of lag compensation techniques by making the treatment of time an integral part of the programming model. Timelines allow programmers to manipulate past and future values and control how state diverges over time for different players. Timelines have been implemented within the Janus toolkit, and were used to implement all examples presented in the paper. The Janus toolkit and documentation are available for download at <span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://equis.cs.queensu.ca/~equis/Janus"><span class="RefSource">http://equis.cs.queensu.ca/~equis/Janus</span></a></span>.</p></div></section></div><div id="Acknowledgments" class="Acknowledgments"><h2 class="Heading">Acknowledgments</h2><div class="content"><p class="SimplePara">We gratefully acknowledge the funding of the NSERC Strategic Project Grant on Technology for Rich Group Interaction in Networked Games and the GRAND Network of Centres of Excellence.</p><div class="FormalPara FormalParaRenderingStyle1"><h3 class="Heading">Open Access</h3><p class="Para">This article is distributed under the terms of the Creative Commons Attribution License which permits any use, distribution, and reproduction in any medium, provided the original author(s) and the source are credited.</p></div></div></div><aside class="Bibliography" id="Bib1" tabindex="-1"><h3 class="Heading">References</h3><div class="content"><ol class="BibliographyWrapper"><li class="Citation"><div class="CitationNumber">1.</div><div class="CitationContent" id="CR1">Aggarwal, S., Banavar, H., Khandelwal, A.: Accuracy in dead-reckoning based distributed multi-player games. In: SIGCOMM’04 Workshops, pp. 161–165. ACM Press, New York (2004)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Aggarwal%2C%20S.%2C%20Banavar%2C%20H.%2C%20Khandelwal%2C%20A.%3A%20Accuracy%20in%20dead-reckoning%20based%20distributed%20multi-player%20games.%20In%3A%20SIGCOMM%E2%80%9904%20Workshops%2C%20pp.%20161%E2%80%93165.%20ACM%20Press%2C%20New%20York%20%282004%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">2.</div><div class="CitationContent" id="CR2">Ashcroft, A.E., Wadge, W.W.: Lucid, a nonprocedural language with iteration. CACM <strong class="EmphasisTypeBold ">20</strong>(7), 519–526 (1977)<span class="Occurrences"><span class="Occurrence OccurrenceZLBID"><a class="gtm-reference" data-reference-type="MATH" target="_blank" rel="noopener noreferrer" href="http://www.emis.de/MATH-item?0358.68033"><span><span>MATH</span></span></a></span><span class="Occurrence OccurrenceDOI"><a class="gtm-reference" data-reference-type="CrossRef" target="_blank" rel="noopener noreferrer" href="http://dx.doi.org/10.1145/359636.359715"><span><span>CrossRef</span></span></a></span><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="http://scholar.google.com/scholar_lookup?title=Lucid%2C%20a%20nonprocedural%20language%20with%20iteration&amp;author=AE.%20Ashcroft&amp;author=WW.%20Wadge&amp;journal=CACM&amp;volume=20&amp;issue=7&amp;pages=519-526&amp;publication_year=1977"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">3.</div><div class="CitationContent" id="CR3">Bernier, Y.W.: Latency compensating methods in client/server in-game protocol design and optimization. In: GDC (2001)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Bernier%2C%20Y.W.%3A%20Latency%20compensating%20methods%20in%20client%2Fserver%20in-game%20protocol%20design%20and%20optimization.%20In%3A%20GDC%20%282001%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">4.</div><div class="CitationContent" id="CR4">Bettner, P., Terrano, M.: 1500 archers on a 28.8: network programming in age of Empires and beyond. In: GDC (2001)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Bettner%2C%20P.%2C%20Terrano%2C%20M.%3A%201500%20archers%20on%20a%2028.8%3A%20network%20programming%20in%20age%20of%20Empires%20and%20beyond.%20In%3A%20GDC%20%282001%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">5.</div><div class="CitationContent" id="CR5">Cai, W., Lee, F., Chen, L.: An auto-adaptive dead reckoning algorithm for distributed interactive simulation. In: Proceedings of the Thirteenth Workshop on Parallel and Distributed Simulation, pp. 82–89 (1999)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Cai%2C%20W.%2C%20Lee%2C%20F.%2C%20Chen%2C%20L.%3A%20An%20auto-adaptive%20dead%20reckoning%20algorithm%20for%20distributed%20interactive%20simulation.%20In%3A%20Proceedings%20of%20the%20Thirteenth%20Workshop%20on%20Parallel%20and%20Distributed%20Simulation%2C%20pp.%2082%E2%80%9389%20%281999%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">6.</div><div class="CitationContent" id="CR6">Chung, G., Dewan, P., Rajaram, S.: Generic and composable latecomer accommodation service for centralized shared systems. In: Proceedings of the IFIP 2.7 Working Conference on Engineering for Human-Computer Interaction, EHCI’98, Herkalion, Crete, 14–18 September 1998<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Chung%2C%20G.%2C%20Dewan%2C%20P.%2C%20Rajaram%2C%20S.%3A%20Generic%20and%20composable%20latecomer%20accommodation%20service%20for%20centralized%20shared%20systems.%20In%3A%20Proceedings%20of%20the%20IFIP%202.7%20Working%20Conference%20on%20Engineering%20for%20Human-Computer%20Interaction%2C%20EHCI%E2%80%9998%2C%20Herkalion%2C%20Crete%2C%2014%E2%80%9318%20September%201998"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">7.</div><div class="CitationContent" id="CR7">Cristian, F.: Probabilistic clock synchronization. Distrib. Comput. <strong class="EmphasisTypeBold ">3</strong>, 146–158 (1989). doi:<span class="ExternalRef"><a target="_blank" rel="noopener noreferrer" href="http://dx.doi.org/10.1007/BF01784024"><span class="RefSource">10.1007/BF01784024</span></a></span>
                <span class="Occurrences"><span class="Occurrence OccurrenceZLBID"><a class="gtm-reference" data-reference-type="MATH" target="_blank" rel="noopener noreferrer" href="http://www.emis.de/MATH-item?0703.68018"><span><span>MATH</span></span></a></span><span class="Occurrence OccurrenceDOI"><a class="gtm-reference" data-reference-type="CrossRef" target="_blank" rel="noopener noreferrer" href="http://dx.doi.org/10.1007/BF01784024"><span><span>CrossRef</span></span></a></span><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="http://scholar.google.com/scholar_lookup?title=Probabilistic%20clock%20synchronization&amp;author=F.%20Cristian&amp;journal=Distrib.%20Comput.&amp;volume=3&amp;pages=146-158&amp;publication_year=1989&amp;doi=10.1007%2FBF01784024"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">8.</div><div class="CitationContent" id="CR8"> de Alwis, B., Gutwin, C., Greenberg S.: GT/SD: performance and simplicity in a groupware toolkit. In: Proceedings of the 1st ACM SIGCHI symposium on Engineering interactive computing systems, EICS’09, pp. 265–274. ACM, New York (2009)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=%20de%20Alwis%2C%20B.%2C%20Gutwin%2C%20C.%2C%20Greenberg%20S.%3A%20GT%2FSD%3A%20performance%20and%20simplicity%20in%20a%20groupware%20toolkit.%20In%3A%20Proceedings%20of%20the%201st%20ACM%20SIGCHI%20symposium%20on%20Engineering%20interactive%20computing%20systems%2C%20EICS%E2%80%9909%2C%20pp.%20265%E2%80%93274.%20ACM%2C%20New%20York%20%282009%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">9.</div><div class="CitationContent" id="CR9">Diot, C., Gauthier, L.: A distributed architecture for multiplayer interactive applications on the internet. In: Network, pp. 6–15. 1999<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Diot%2C%20C.%2C%20Gauthier%2C%20L.%3A%20A%20distributed%20architecture%20for%20multiplayer%20interactive%20applications%20on%20the%20internet.%20In%3A%20Network%2C%20pp.%206%E2%80%9315.%201999"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">10.</div><div class="CitationContent" id="CR10">Ellis, C.A., Gibbs, S.J.: Concurrency control in groupware systems. In: SIGMOD ‘89, pp. 399–407 (1989)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Ellis%2C%20C.A.%2C%20Gibbs%2C%20S.J.%3A%20Concurrency%20control%20in%20groupware%20systems.%20In%3A%20SIGMOD%20%E2%80%9889%2C%20pp.%20399%E2%80%93407%20%281989%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">11.</div><div class="CitationContent" id="CR11">Eugster, P., Felber, P., Guerraoui, R., Kermarrec, A.: The many faces of publish/subscribe. ACM Comput. Surv. <strong class="EmphasisTypeBold ">35</strong>(2), 114–131 (2003)<span class="Occurrences"><span class="Occurrence OccurrenceDOI"><a class="gtm-reference" data-reference-type="CrossRef" target="_blank" rel="noopener noreferrer" href="http://dx.doi.org/10.1145/857076.857078"><span><span>CrossRef</span></span></a></span><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="http://scholar.google.com/scholar_lookup?title=The%20many%20faces%20of%20publish%2Fsubscribe&amp;author=P.%20Eugster&amp;author=P.%20Felber&amp;author=R.%20Guerraoui&amp;author=A.%20Kermarrec&amp;journal=ACM%20Comput.%20Surv.&amp;volume=35&amp;issue=2&amp;pages=114-131&amp;publication_year=2003"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">12.</div><div class="CitationContent" id="CR12">Ferretti, S.: A Synchronization protocol for supporting peer-to-peer multiplayer online games in overlay networks. In: DEBS ’08, pp. 83–94 (2008)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Ferretti%2C%20S.%3A%20A%20Synchronization%20protocol%20for%20supporting%20peer-to-peer%20multiplayer%20online%20games%20in%20overlay%20networks.%20In%3A%20DEBS%20%E2%80%9908%2C%20pp.%2083%E2%80%9394%20%282008%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">13.</div><div class="CitationContent" id="CR13">Ferretti, S.: Cheating detection through game time modeling: A better way to avoid time cheats in P2P MOGs? Multimedia Tools Appl. <strong class="EmphasisTypeBold ">37</strong>(3), 339–363 (2008)<span class="Occurrences"><span class="Occurrence OccurrenceDOI"><a class="gtm-reference" data-reference-type="CrossRef" target="_blank" rel="noopener noreferrer" href="http://dx.doi.org/10.1007/s11042-007-0163-2"><span><span>CrossRef</span></span></a></span><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="http://scholar.google.com/scholar_lookup?title=Cheating%20detection%20through%20game%20time%20modeling%3A%20A%20better%20way%20to%20avoid%20time%20cheats%20in%20P2P%20MOGs%3F&amp;author=S.%20Ferretti&amp;journal=Multimedia%20Tools%20Appl.&amp;volume=37&amp;issue=3&amp;pages=339-363&amp;publication_year=2008"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">14.</div><div class="CitationContent" id="CR14">Freeman-Benson, B., Borning, A.: The design and implementation of Kaleidoscope’90, a constraint imperative programming language. In: Proc. IEEE Intl. Conf. on Computer Languages, pp. 174–180 (1992)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Freeman-Benson%2C%20B.%2C%20Borning%2C%20A.%3A%20The%20design%20and%20implementation%20of%20Kaleidoscope%E2%80%9990%2C%20a%20constraint%20imperative%20programming%20language.%20In%3A%20Proc.%20IEEE%20Intl.%20Conf.%20on%20Computer%20Languages%2C%20pp.%20174%E2%80%93180%20%281992%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">15.</div><div class="CitationContent" id="CR15">Fujimoto, R.M.: Parallel and Distributed Simulation Systems. Wiley, New York (2000). ISBN 0-471-18383-0<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Fujimoto%2C%20R.M.%3A%20Parallel%20and%20Distributed%20Simulation%20Systems.%20Wiley%2C%20New%20York%20%282000%29.%20ISBN%200-471-18383-0"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">16.</div><div class="CitationContent" id="CR16">Gusella, R., Zatti, S.: The accuracy of the clock synchronization achieved by TEMPO in Berkeley UNIX 4.3 BSD. IEEE T-SE <strong class="EmphasisTypeBold ">15</strong>(7), 853 (1989)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="http://scholar.google.com/scholar_lookup?title=The%20accuracy%20of%20the%20clock%20synchronization%20achieved%20by%20TEMPO%20in%20Berkeley%20UNIX%204.3%20BSD&amp;author=R.%20Gusella&amp;author=S.%20Zatti&amp;journal=IEEE%20T-SE&amp;volume=15&amp;issue=7&amp;pages=853&amp;publication_year=1989"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">17.</div><div class="CitationContent" id="CR17">Gutwin, C., Fedak, C., Watson, M., Dyck, J., Bell, T.: Improving network efficiency in real-time groupware with general message compression. In: CSCW, p. 128. ACM (2006)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Gutwin%2C%20C.%2C%20Fedak%2C%20C.%2C%20Watson%2C%20M.%2C%20Dyck%2C%20J.%2C%20Bell%2C%20T.%3A%20Improving%20network%20efficiency%20in%20real-time%20groupware%20with%20general%20message%20compression.%20In%3A%20CSCW%2C%20p.%20128.%20ACM%20%282006%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">18.</div><div class="CitationContent" id="CR18">Hernandez, H., Graham, T.C.N., Fehlings, D., Switzer, L., Ye, Z., Bellay, Q., Hamza, A., Savery, C., Stach, T.: Design of an exergaming station for children with cerebral palsy. In: CHI, pp. 2619–2628 (2012)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Hernandez%2C%20H.%2C%20Graham%2C%20T.C.N.%2C%20Fehlings%2C%20D.%2C%20Switzer%2C%20L.%2C%20Ye%2C%20Z.%2C%20Bellay%2C%20Q.%2C%20Hamza%2C%20A.%2C%20Savery%2C%20C.%2C%20Stach%2C%20T.%3A%20Design%20of%20an%20exergaming%20station%20for%20children%20with%20cerebral%20palsy.%20In%3A%20CHI%2C%20pp.%202619%E2%80%932628%20%282012%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">19.</div><div class="CitationContent" id="CR19">IEEE standard for modeling and simulation (M&amp;S) high level architecture (HLA)–object model template (OMT) specification. In: Proceedings of IEEE Standard 1516.2-2000 (2000)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=IEEE%20standard%20for%20modeling%20and%20simulation%20%28M%26S%29%20high%20level%20architecture%20%28HLA%29%E2%80%93object%20model%20template%20%28OMT%29%20specification.%20In%3A%20Proceedings%20of%20IEEE%20Standard%201516.2-2000%20%282000%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">20.</div><div class="CitationContent" id="CR20">IEEE standards for distributed interactive simulation—Application protocols. In: Proceedings of IEEE Standard 1278–1993 (1993)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=IEEE%20standards%20for%20distributed%20interactive%20simulation%E2%80%94Application%20protocols.%20In%3A%20Proceedings%20of%20IEEE%20Standard%201278%E2%80%931993%20%281993%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">21.</div><div class="CitationContent" id="CR21">IEEE standard for distributed interactive simulation—Application protocols. In: Proceedings of IEEE Standard 1278.1-1995 (revision of IEEE Std 1278–1993)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=IEEE%20standard%20for%20distributed%20interactive%20simulation%E2%80%94Application%20protocols.%20In%3A%20Proceedings%20of%20IEEE%20Standard%201278.1-1995%20%28revision%20of%20IEEE%20Std%201278%E2%80%931993%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">22.</div><div class="CitationContent" id="CR22">Jefferson, D.: Virtual time. ACM Transact. Program. Lang. Syst. <strong class="EmphasisTypeBold ">7</strong>(3), 404–425 (1985)<span class="Occurrences"><span class="Occurrence OccurrenceAMSID"><a class="gtm-reference" data-reference-type="MathSciNet" target="_blank" rel="noopener noreferrer" href="http://www.ams.org/mathscinet-getitem?mr=811108"><span><span>MathSciNet</span></span></a></span><span class="Occurrence OccurrenceDOI"><a class="gtm-reference" data-reference-type="CrossRef" target="_blank" rel="noopener noreferrer" href="http://dx.doi.org/10.1145/3916.3988"><span><span>CrossRef</span></span></a></span><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="http://scholar.google.com/scholar_lookup?title=Virtual%20time&amp;author=D.%20Jefferson&amp;journal=ACM%20Transact.%20Program.%20Lang.%20Syst.&amp;volume=7&amp;issue=3&amp;pages=404-425&amp;publication_year=1985"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">23.</div><div class="CitationContent" id="CR23">Kurczak, J., Graham, T.C.N., Joly, C., Mandryk, R.: Hearing is believing: Evaluating ambient audio for location-based games. In: ACE 2011, pp. 32:1–32:8 (2011)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Kurczak%2C%20J.%2C%20Graham%2C%20T.C.N.%2C%20Joly%2C%20C.%2C%20Mandryk%2C%20R.%3A%20Hearing%20is%20believing%3A%20Evaluating%20ambient%20audio%20for%20location-based%20games.%20In%3A%20ACE%202011%2C%20pp.%2032%3A1%E2%80%9332%3A8%20%282011%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">24.</div><div class="CitationContent" id="CR24">Mauve, M.: How to Keep a Dead Man from Shooting. In: Interactive Distributed Multimedia Systems and Telecommunication Services, pp. 199–204. LNCS 1905, Heidelberg (2000)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Mauve%2C%20M.%3A%20How%20to%20Keep%20a%20Dead%20Man%20from%20Shooting.%20In%3A%20Interactive%20Distributed%20Multimedia%20Systems%20and%20Telecommunication%20Services%2C%20pp.%20199%E2%80%93204.%20LNCS%201905%2C%20Heidelberg%20%282000%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">25.</div><div class="CitationContent" id="CR25">Mauve, M., Vogel, J., Hilt, V., Effelsberg, W.: Local-lag and timewarp: providing consistency in replicated continuous interactive media. IEEE Transact. Multimedia <strong class="EmphasisTypeBold ">6</strong>(1), 47–57 (2004)<span class="Occurrences"><span class="Occurrence OccurrenceDOI"><a class="gtm-reference" data-reference-type="CrossRef" target="_blank" rel="noopener noreferrer" href="http://dx.doi.org/10.1109/TMM.2003.819751"><span><span>CrossRef</span></span></a></span><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="http://scholar.google.com/scholar_lookup?title=Local-lag%20and%20timewarp%3A%20providing%20consistency%20in%20replicated%20continuous%20interactive%20media&amp;author=M.%20Mauve&amp;author=J.%20Vogel&amp;author=V.%20Hilt&amp;author=W.%20Effelsberg&amp;journal=IEEE%20Transact.%20Multimedia&amp;volume=6&amp;issue=1&amp;pages=47-57&amp;publication_year=2004"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">26.</div><div class="CitationContent" id="CR26">Myers, B., Miller, R., McDaniel, R., Ferrency, A.: Easily adding animations to interfaces using constraints. In: UIST ’96, pp. 119–128 (1996)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Myers%2C%20B.%2C%20Miller%2C%20R.%2C%20McDaniel%2C%20R.%2C%20Ferrency%2C%20A.%3A%20Easily%20adding%20animations%20to%20interfaces%20using%20constraints.%20In%3A%20UIST%20%E2%80%9996%2C%20pp.%20119%E2%80%93128%20%281996%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">27.</div><div class="CitationContent" id="CR27">Pantel, L., Wolf, L.C.: On the suitability of dead reckoning schemes for games. In: NetGames, pp. 79–84. ACM (2002)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Pantel%2C%20L.%2C%20Wolf%2C%20L.C.%3A%20On%20the%20suitability%20of%20dead%20reckoning%20schemes%20for%20games.%20In%3A%20NetGames%2C%20pp.%2079%E2%80%9384.%20ACM%20%282002%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">28.</div><div class="CitationContent" id="CR28">Pelekis, N., Theodoulidis, B., Kopanakis, I., Theodoridis, Y.: Literature review of spatio-temporal database models. Knowl. Eng. Rev. <strong class="EmphasisTypeBold ">19</strong>, 235–274 (2004)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="http://scholar.google.com/scholar_lookup?title=Literature%20review%20of%20spatio-temporal%20database%20models&amp;author=N..%20Pelekis&amp;author=B..%20Theodoulidis&amp;author=I..%20Kopanakis&amp;author=Y..%20Theodoridis&amp;journal=Knowl.%20Eng.%20Rev.&amp;volume=19&amp;pages=235-274&amp;publication_year=2004"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">29.</div><div class="CitationContent" id="CR29">Graham, T.C.N., Bellay, Q., Schumann, I., Sepasi, A.: Towards game orchestration: Tangible manipulation of in-game experiences. In: TEI 2012. ACM Press (2012)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Graham%2C%20T.C.N.%2C%20Bellay%2C%20Q.%2C%20Schumann%2C%20I.%2C%20Sepasi%2C%20A.%3A%20Towards%20game%20orchestration%3A%20Tangible%20manipulation%20of%20in-game%20experiences.%20In%3A%20TEI%202012.%20ACM%20Press%20%282012%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">30.</div><div class="CitationContent" id="CR30">Savery, C., Graham, T.C.N.: It’s about time: Confronting latency in the development of groupware systems. In: Proceedings of the ACM 2011 conference on Computer supported cooperative work, CSCW ’11, pp. 177–186. ACM, New York (2011)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Savery%2C%20C.%2C%20Graham%2C%20T.C.N.%3A%20It%E2%80%99s%20about%20time%3A%20Confronting%20latency%20in%20the%20development%20of%20groupware%20systems.%20In%3A%20Proceedings%20of%20the%20ACM%202011%20conference%20on%20Computer%20supported%20cooperative%20work%2C%20CSCW%20%E2%80%9911%2C%20pp.%20177%E2%80%93186.%20ACM%2C%20New%20York%20%282011%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">31.</div><div class="CitationContent" id="CR31">Savery, C., Graham, T.C.N., Gutwin, C.: Human factors of consistency maintenance in multiplayer computer games. In: GROUP, pp. 187–196 (2010)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Savery%2C%20C.%2C%20Graham%2C%20T.C.N.%2C%20Gutwin%2C%20C.%3A%20Human%20factors%20of%20consistency%20maintenance%20in%20multiplayer%20computer%20games.%20In%3A%20GROUP%2C%20pp.%20187%E2%80%93196%20%282010%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">32.</div><div class="CitationContent" id="CR32">Sharkey, P.M., Ryan, M.D., Roberts, D.J.: A local perception filter for distributed virtual environments. In: Proceedings of the Virtual Reality Annual International Symposium, pp. 242–249. IEEE Computer Society Press (1998)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Sharkey%2C%20P.M.%2C%20Ryan%2C%20M.D.%2C%20Roberts%2C%20D.J.%3A%20A%20local%20perception%20filter%20for%20distributed%20virtual%20environments.%20In%3A%20Proceedings%20of%20the%20Virtual%20Reality%20Annual%20International%20Symposium%2C%20pp.%20242%E2%80%93249.%20IEEE%20Computer%20Society%20Press%20%281998%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">33.</div><div class="CitationContent" id="CR33">Singhal, S.: Effective remote modeling in large-scale distributed simulation and visualization environments. PhD thesis, Standford University (1996)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Singhal%2C%20S.%3A%20Effective%20remote%20modeling%20in%20large-scale%20distributed%20simulation%20and%20visualization%20environments.%20PhD%20thesis%2C%20Standford%20University%20%281996%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">34.</div><div class="CitationContent" id="CR34">Smed, J., Hakonen, H.: Algorithms and Networking for Computer Games. Wiley, New York (2006). ISBN: 9780470018125<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Smed%2C%20J.%2C%20Hakonen%2C%20H.%3A%20Algorithms%20and%20Networking%20for%20Computer%20Games.%20Wiley%2C%20New%20York%20%282006%29.%20ISBN%3A%209780470018125"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">35.</div><div class="CitationContent" id="CR35">Stach, T., Graham, T.C.N.: Exploring haptic feedback in exergames. In: Human-Computer Interaction INTERACT 2011, pp. 18–35 (2011)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Stach%2C%20T.%2C%20Graham%2C%20T.C.N.%3A%20Exploring%20haptic%20feedback%20in%20exergames.%20In%3A%20Human-Computer%20Interaction%20INTERACT%202011%2C%20pp.%2018%E2%80%9335%20%282011%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">36.</div><div class="CitationContent" id="CR36">Stuckel, D., Gutwin, C.: The effects of local lag on tightly-coupled interaction in distributed groupware. In: CSCW, pp. 447–456. ACM (2008)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Stuckel%2C%20D.%2C%20Gutwin%2C%20C.%3A%20The%20effects%20of%20local%20lag%20on%20tightly-coupled%20interaction%20in%20distributed%20groupware.%20In%3A%20CSCW%2C%20pp.%20447%E2%80%93456.%20ACM%20%282008%29"><span><span>Google Scholar</span></span></a></span></span></div></li><li class="Citation"><div class="CitationNumber">37.</div><div class="CitationContent" id="CR37">Zhao, S., Li, D., Gu, H., Shao, B., Gu, N.: An approach to sharing legacy tv/arcade games for real-time collaboration. In: Proc. ICDCS, pp. 165–172. IEEE (2009)<span class="Occurrences"><span class="Occurrence OccurrenceGS"><a target="_blank" rel="noopener noreferrer" class="google-scholar-link gtm-reference" data-reference-type="Google Scholar" href="https://scholar.google.com/scholar?q=Zhao%2C%20S.%2C%20Li%2C%20D.%2C%20Gu%2C%20H.%2C%20Shao%2C%20B.%2C%20Gu%2C%20N.%3A%20An%20approach%20to%20sharing%20legacy%20tv%2Farcade%20games%20for%20real-time%20collaboration.%20In%3A%20Proc.%20ICDCS%2C%20pp.%20165%E2%80%93172.%20IEEE%20%282009%29"><span><span>Google Scholar</span></span></a></span></span></div></li></ol></div></aside><section class="Section1 RenderAsSection1"><h2 class="Heading" id="copyrightInformation">Copyright information</h2><div class="ArticleCopyright content"><div class="ArticleCopyright">© The Author(s) 2012</div></div></section><section id="authorsandaffiliations" class="Section1 RenderAsSection1"><h2 class="Heading">Authors and Affiliations</h2><div class="content authors-affiliations u-interface"><ul class="test-contributor-names"><li><span itemprop="name" class="authors-affiliations__name">Cheryl Savery</span><ul class="authors-affiliations__indexes u-inline-list" data-role="AuthorsIndexes"><li data-affiliation="affiliation-1">1</li></ul><span class="author-information"><span class="author-information__contact u-icon-before icon--email-before"><a href="mailto:savery@cs.queensu.ca" title="savery@cs.queensu.ca" itemprop="email" class="gtm-email-author">Email author</a></span></span></li><li><span itemprop="name" class="authors-affiliations__name">T. C. Nicholas Graham</span><ul class="authors-affiliations__indexes u-inline-list" data-role="AuthorsIndexes"><li data-affiliation="affiliation-1">1</li></ul></li></ul><ol class="test-affiliations"><li class="affiliation" data-test="affiliation-1" data-affiliation-highlight="affiliation-1" itemprop="affiliation" itemscope="" itemtype="http://schema.org/Organization"><span class="affiliation__count">1.</span><span class="affiliation__item"><span itemprop="department" class="affiliation__department">School of Computing</span><span itemprop="name" class="affiliation__name">Queen’s University</span><span itemprop="city" class="affiliation__city">Kingston</span><span itemprop="country" class="affiliation__country">Canada</span></span></li></ol></div></section></div>
                                <aside class="content-type-about" id="AboutThisContent">
    <h2 class="Heading" id="aboutcontent">About this article</h2>
    <div class="content bibliographic-information">
        
            <div class="crossmark__adjacent">
                <div class="u-mb-16">
	<dl class="article-cite">
		<dt class="test-cite-heading">
			Cite this article as:
		</dt>
		<dd id="citethis-text">Savery, C. & Graham, T.C.N. Multimedia Systems (2013) 19: 271. https://doi.org/10.1007/s00530-012-0271-3</dd>
	</dl>
</div>

                    <ul class="bibliographic-information__list bibliographic-information__list--inline">
        <li class="bibliographic-information__item">
            <span class="bibliographic-information__title"><abbr title="Digital Object Identifier">DOI</abbr></span>
            <span class="bibliographic-information__value" id="doi-url">https://doi.org/10.1007/s00530-012-0271-3</span>
        </li>
            <li class="bibliographic-information__item">
                <span class="bibliographic-information__title">Publisher Name</span>
                <span class="bibliographic-information__value" id="publisher-name">Springer-Verlag</span>
            </li>
            <li class="bibliographic-information__item">
                <span class="bibliographic-information__title">Print ISSN</span>
                <span class="bibliographic-information__value" id="print-issn">0942-4962</span>
            </li>
            <li class="bibliographic-information__item ">
                <span class="bibliographic-information__title">Online ISSN</span>
                <span class="bibliographic-information__value" id="electronic-issn">1432-1882</span>
            </li>

        
    </ul>

                <ul class="bibliographic-information__list">
    <li class="bibliographic-information__item">
        <a id="about-journal" class="bibliographic-information__misc-links gtm-about-this" title="Visit Springer.com for information about this article&#39;s journal"
           href="//www.springer.com/journal/530/about">About this journal</a>
    </li>
    <li class="bibliographic-information__item">
        <a id="reprintsandpermissions-link" class="u-external" target="_blank" rel="noopener noreferrer" href="https://s100.copyright.com/AppDispatchServlet?publisherName&#x3D;Springer&amp;orderBeanReset&#x3D;true&amp;orderSource&#x3D;SpringerLink&amp;author&#x3D;Cheryl+Savery&amp;authorEmail&#x3D;savery%40cs.queensu.ca&amp;issueNum&#x3D;3&amp;contentID&#x3D;10.1007%2Fs00530-012-0271-3&amp;openAccess&#x3D;true&amp;endPage&#x3D;287&amp;publicationDate&#x3D;2012&amp;startPage&#x3D;271&amp;volumeNum&#x3D;19&amp;title&#x3D;Timelines%3A+simplifying+the+programming+of+lag+compensation+for+the+next+generation+of+networked+games&amp;imprint&#x3D;The+Author%28s%29&amp;publication&#x3D;0942-4962&amp;authorAddress&#x3D;Kingston%2C+ON%2C+Canada" title="Visit RightsLink for information about reusing this article">Reprints and Permissions</a>
    </li>
</ul>
            </div>
        
            
    </div>
</aside>

                                <div class="collapsible-section uptodate-recommendations gtm-recommendations">
    <h2 class="uptodate-recommendations__title collapsible-section__heading gtm-recommendations__title" id="uptodaterecommendations">Personalised recommendations</h2>
    <div class="collapsible-section__content">
        <div class="uptodate-recommendations__container">
             <link rel="uptodate-inline" href="/springerlink-static/1048886164/css/recommendations.css"/>
        </div>
    </div>
</div>
                                            <div class="sticky-banner 
            u-interface u-js-screenreader-only" aria-hidden="true" data-component="SpringerLink.StickyBanner" data-namespace="hasButton">
                <div class="sticky-banner__container">
                        <div class="citations" data-component="SV.Dropdown" data-namespace="citationsSticky">
        <h3 class="u-h4" data-role="button-dropdown__title">
    <span>Export</span>
    <span class="hide-text-small">citation</span>
</h3>
<ul class="citations__content" data-role="button-dropdown__content">
        <li>
            <a href="//citation-needed.springer.com/v2/references/10.1007/s00530-012-0271-3?format&#x3D;refman&amp;flavour&#x3D;citation"
               title="Download this article&#39;s citation as a .RIS file" class="gtm-export-citation" data-gtmlabel="RIS">
                <span class="citations__extension" data-gtmlabel="RIS">
                    <svg class="u-vertical-align-absolute" width="12" height="14" viewBox="0 0 12 14" xmlns="http://www.w3.org/2000/svg"><path d="M7 7.269v-6.271c0-.551-.448-.998-1-.998-.556 0-1 .447-1 .998v6.271l-1.5-1.547c-.375-.387-1.01-.397-1.401-.006l.016-.016c-.397.397-.391 1.025-.001 1.416l3.178 3.178c.392.392 1.024.391 1.415 0l3.178-3.178c.392-.392.391-1.025-.001-1.416l.016.016c-.397-.397-1.018-.388-1.401.006l-1.5 1.547zm-7 5.731c0-.552.456-1 1.002-1h9.995c.554 0 1.002.444 1.002 1 0 .552-.456 1-1.002 1h-9.995c-.554 0-1.002-.444-1.002-1z" fill="#0176C3"/></svg>
                    .RIS
                </span>
                <span class="citations__types">
                        <span>
                            Papers
                        </span>
                        <span>
                            Reference Manager
                        </span>
                        <span>
                            RefWorks
                        </span>
                        <span>
                            Zotero
                        </span>
                </span>
            </a>
        </li>
        <li>
            <a href="//citation-needed.springer.com/v2/references/10.1007/s00530-012-0271-3?format&#x3D;endnote&amp;flavour&#x3D;citation"
               title="Download this article&#39;s citation as a .ENW file" class="gtm-export-citation" data-gtmlabel="ENW">
                <span class="citations__extension" data-gtmlabel="ENW">
                    <svg class="u-vertical-align-absolute" width="12" height="14" viewBox="0 0 12 14" xmlns="http://www.w3.org/2000/svg"><path d="M7 7.269v-6.271c0-.551-.448-.998-1-.998-.556 0-1 .447-1 .998v6.271l-1.5-1.547c-.375-.387-1.01-.397-1.401-.006l.016-.016c-.397.397-.391 1.025-.001 1.416l3.178 3.178c.392.392 1.024.391 1.415 0l3.178-3.178c.392-.392.391-1.025-.001-1.416l.016.016c-.397-.397-1.018-.388-1.401.006l-1.5 1.547zm-7 5.731c0-.552.456-1 1.002-1h9.995c.554 0 1.002.444 1.002 1 0 .552-.456 1-1.002 1h-9.995c-.554 0-1.002-.444-1.002-1z" fill="#0176C3"/></svg>
                    .ENW
                </span>
                <span class="citations__types">
                        <span>
                            EndNote
                        </span>
                </span>
            </a>
        </li>
        <li>
            <a href="//citation-needed.springer.com/v2/references/10.1007/s00530-012-0271-3?format&#x3D;bibtex&amp;flavour&#x3D;citation"
               title="Download this article&#39;s citation as a .BIB file" class="gtm-export-citation" data-gtmlabel="BIB">
                <span class="citations__extension" data-gtmlabel="BIB">
                    <svg class="u-vertical-align-absolute" width="12" height="14" viewBox="0 0 12 14" xmlns="http://www.w3.org/2000/svg"><path d="M7 7.269v-6.271c0-.551-.448-.998-1-.998-.556 0-1 .447-1 .998v6.271l-1.5-1.547c-.375-.387-1.01-.397-1.401-.006l.016-.016c-.397.397-.391 1.025-.001 1.416l3.178 3.178c.392.392 1.024.391 1.415 0l3.178-3.178c.392-.392.391-1.025-.001-1.416l.016.016c-.397-.397-1.018-.388-1.401.006l-1.5 1.547zm-7 5.731c0-.552.456-1 1.002-1h9.995c.554 0 1.002.444 1.002 1 0 .552-.456 1-1.002 1h-9.995c-.554 0-1.002-.444-1.002-1z" fill="#0176C3"/></svg>
                    .BIB
                </span>
                <span class="citations__types">
                        <span>
                            BibTeX
                        </span>
                        <span>
                            JabRef
                        </span>
                        <span>
                            Mendeley
                        </span>
                </span>
            </a>
        </li>
</ul>
    </div>

                        <div class="share-this" data-component="SV.Dropdown" data-namespace="shareThisSticky">
        <h3 class="u-h4" data-role="button-dropdown__title">
    <span>Share</span>
    <span class="hide-text-small">article</span>
</h3>
<ul class="share-this__content" data-role="button-dropdown__content">
    <li>
        <a class="test-shareby-email-link gtm-shareby-email-link" href="mailto:?to&#x3D;&amp;subject&#x3D;Read%20this%20article%20on%20SpringerLink&amp;body&#x3D;Timelines%3A%20simplifying%20the%20programming%20of%20lag%20compensation%20for%20the%20next%20generation%20of%20networked%20games%0A%0Ahttps%3A%2F%2Flink.springer.com%2Farticle%2F10.1007%2Fs00530-012-0271-3" title="Share this article via email">
            <span class="share-this__types">
                <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><g fill="none"><path fill-opacity="0" fill="#fff" d="M0 0h24v24h-24z"/><g transform="translate(3 5)"><rect fill="#F9F9F9" width="18" height="14" rx="2"/><path d="M1 2.006v9.988c0 .557.446 1.006.995 1.006h14.01c.549 0 .995-.449.995-1.006v-9.988c0-.557-.446-1.006-.995-1.006h-14.01c-.549 0-.995.449-.995 1.006zm-1 0c0-1.108.893-2.006 1.995-2.006h14.01c1.102 0 1.995.897 1.995 2.006v9.988c0 1.108-.893 2.006-1.995 2.006h-14.01c-1.102 0-1.995-.897-1.995-2.006v-9.988zM9 9l7-4v-1.443l-7 4-7-4v1.443z" fill="#666"/></g></g></svg>
                <span>Email</span>
            </span>
        </a>
    </li>
    <li>
        <a class="test-shareby-facebook-link gtm-shareby-facebook-link" href="https://www.facebook.com/sharer/sharer.php?u&#x3D;https%3A%2F%2Flink.springer.com%2Farticle%2F10.1007%2Fs00530-012-0271-3" target="_blank" rel="noopener noreferrer" title="Share this article via Facebook">
            <span class="share-this__types">
                <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><g fill="none"><path fill-opacity="0" fill="#fff" d="M0 0h24v24h-24z"/><path d="M12.717 19.091h-2.66v-6.274h-1.329v-2.162h1.329v-1.298c0-1.763.75-2.813 2.883-2.813h1.775v2.162h-1.11c-.83 0-.885.302-.885.866l-.004 1.082h2.011l-.235 2.162h-1.775v6.274z" fill="#666"/></g></svg>
                <span>Facebook</span>
            </span>
        </a>
    </li>
    <li>
        <a class="test-shareby-twitter-link gtm-shareby-twitter-link" href="https://twitter.com/intent/tweet?text&#x3D;I%27m%20reading%20this%20on%20%23springerlink&amp;url&#x3D;https%3A%2F%2Flink.springer.com%2Farticle%2F10.1007%2Fs00530-012-0271-3" target="_blank" rel="noopener noreferrer" title="Share this article via Twitter">
            <span class="share-this__types">
                <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><g fill="none"><path fill-opacity="0" fill="#fff" d="M0 0h24v24h-24z"/><path d="M16.651 9.189c.485-.306.858-.792 1.033-1.371-.454.284-.957.49-1.493.601-.428-.482-1.039-.783-1.715-.783-1.298 0-2.349 1.11-2.349 2.478 0 .194.019.384.06.564-1.952-.104-3.684-1.089-4.843-2.59-.202.367-.318.793-.318 1.247 0 .859.415 1.618 1.045 2.063-.385-.013-.748-.126-1.065-.31v.03c0 1.201.809 2.203 1.886 2.43-.198.058-.405.087-.62.087-.151 0-.299-.015-.442-.044.299.984 1.166 1.702 2.195 1.721-.805.665-1.818 1.061-2.919 1.061-.19 0-.377-.011-.561-.034 1.04.703 2.275 1.113 3.602 1.113 4.323 0 6.686-3.777 6.686-7.052l-.006-.321c.459-.35.859-.786 1.173-1.283-.422.197-.875.33-1.349.39z" fill="#666"/></g></svg>
                <span>Twitter</span>
            </span>
        </a>
    </li>
        <li>
            <a class="test-shareby-linkedin-link gtm-shareby-linkedin-link" href="https://www.linkedin.com/shareArticle?mini&#x3D;true&amp;url&#x3D;https%3A%2F%2Flink.springer.com%2Farticle%2F10.1007%2Fs00530-012-0271-3&amp;title&#x3D;Timelines: simplifying the programming of lag compensation for the next generation of networked games&amp;summary&#x3D;Lag compensation algorithms used in networked games require programmers to manage the complexities of dealing with both time and shared state. This can make implementing lag compensation techniques challenging. The difficulties in expressing these a…" target="_blank" rel="noopener noreferrer" title="Share this article via LinkedIn">
                <span class="share-this__types">
                    <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><g fill="none"><path fill-opacity="0" fill="#fff" d="M0 0h24v24h-24z"/><path d="M6.821 10.044h2.126v7.41h-2.126v-7.41zm1.009-.927h-.015c-.77 0-1.269-.566-1.269-1.284 0-.732.514-1.287 1.299-1.287.784 0 1.267.554 1.282 1.285 0 .717-.498 1.286-1.297 1.286zm9.625 8.338h-2.411v-3.835c0-1.004-.377-1.688-1.206-1.688-.634 0-.987.462-1.151.908-.062.159-.052.382-.052.606v4.01h-2.389s.031-6.794 0-7.411h2.389v1.163c.141-.509.904-1.234 2.122-1.234 1.511 0 2.698 1.067 2.698 3.361v4.121z" fill="#666"/></g></svg>
                    <span>LinkedIn</span>
                </span>
            </a>
        </li>
        <li>
            <a class="gtm-shareby-sharelink-link" data-test="shareable-link" href="/sharelink/10.1007/s00530-012-0271-3" target="_blank" rel="noopener noreferrer" title="Get shareable link">
                <span class="share-this__types">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="#666" d="M9 7c-2.8 0-5 2.2-5 5s2.2 5 5 5h2v-2h-2c-1.7 0-3-1.3-3-3s1.3-3 3-3h2v-2h-2zm6 0c2.8 0 5 2.2 5 5s-2.2 5-5 5h-2v-2h2c1.7 0 3-1.3 3-3s-1.3-3-3-3h-2v-2h2zm-1 4c.5 0 1 .4 1 1s-.5 1-1 1h-4c-.5 0-1-.4-1-1s.5-1 1-1h4z"/></svg>
                    <span>Shareable link</span>
                </span>
            </a>
        </li>
</ul>
    </div>

                                    <a href="/content/pdf/10.1007%2Fs00530-012-0271-3.pdf" target="_blank" class="c-button c-button--blue c-button__icon-right gtm-pdf-link" title="Download this article in PDF format" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" version="1.1"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g fill="#0176C3"><g transform="translate(12.000000, 5.000000)"><path d="M7 7.3L7 1C7 0.4 6.6 0 6 0 5.4 0 5 0.4 5 1L5 7.3 3.5 5.7C3.1 5.3 2.5 5.3 2.1 5.7L2.1 5.7C1.7 6.1 1.7 6.7 2.1 7.1L5.3 10.3C5.7 10.7 6.3 10.7 6.7 10.3L9.9 7.1C10.3 6.7 10.3 6.1 9.9 5.7L9.9 5.7C9.5 5.3 8.9 5.3 8.5 5.7L7 7.3 7 7.3ZM0 13C0 12.4 0.5 12 1 12L11 12C11.6 12 12 12.4 12 13 12 13.6 11.5 14 11 14L1 14C0.4 14 0 13.6 0 13L0 13Z"/></g></g></g></svg>
            <span class="hide-text-small">Download</span>
            <span>PDF</span>
        </a>

                </div>
            </div>




                            </div>
                        </div>

                        <aside class="main-sidebar-right u-interface">
                            <div data-role="sticky-wrapper">
                                <div class="main-sidebar-right__content u-composite-layer" data-component="SpringerLink.StickySidebar">
                                    <div class="article-actions" id="article-actions">
                                        <h2 class="u-screenreader-only">Actions</h2>


                                        <div class="u-js-hide u-js-show-two-col">
                                            

                                                    <div class="download-article test-pdf-link">
                                                                <a href="/content/pdf/10.1007%2Fs00530-012-0271-3.pdf" target="_blank" class="c-button c-button--blue c-button__icon-right gtm-pdf-link" title="Download this article in PDF format" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" version="1.1"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g fill="#0176C3"><g transform="translate(12.000000, 5.000000)"><path d="M7 7.3L7 1C7 0.4 6.6 0 6 0 5.4 0 5 0.4 5 1L5 7.3 3.5 5.7C3.1 5.3 2.5 5.3 2.1 5.7L2.1 5.7C1.7 6.1 1.7 6.7 2.1 7.1L5.3 10.3C5.7 10.7 6.3 10.7 6.7 10.3L9.9 7.1C10.3 6.7 10.3 6.1 9.9 5.7L9.9 5.7C9.5 5.3 8.9 5.3 8.5 5.7L7 7.3 7 7.3ZM0 13C0 12.4 0.5 12 1 12L11 12C11.6 12 12 12.4 12 13 12 13.6 11.5 14 11 14L1 14C0.4 14 0 13.6 0 13L0 13Z"/></g></g></g></svg>
            <span class="hide-text-small">Download</span>
            <span>PDF</span>
        </a>

                                                    </div>


                                                <div class="citations" data-component="SV.Dropdown" data-namespace="citations">
        <h3 class="u-h4" data-role="button-dropdown__title">
    <span>Export</span>
    <span class="hide-text-small">citation</span>
</h3>
<ul class="citations__content" data-role="button-dropdown__content">
        <li>
            <a href="//citation-needed.springer.com/v2/references/10.1007/s00530-012-0271-3?format&#x3D;refman&amp;flavour&#x3D;citation"
               title="Download this article&#39;s citation as a .RIS file" class="gtm-export-citation" data-gtmlabel="RIS">
                <span class="citations__extension" data-gtmlabel="RIS">
                    <svg class="u-vertical-align-absolute" width="12" height="14" viewBox="0 0 12 14" xmlns="http://www.w3.org/2000/svg"><path d="M7 7.269v-6.271c0-.551-.448-.998-1-.998-.556 0-1 .447-1 .998v6.271l-1.5-1.547c-.375-.387-1.01-.397-1.401-.006l.016-.016c-.397.397-.391 1.025-.001 1.416l3.178 3.178c.392.392 1.024.391 1.415 0l3.178-3.178c.392-.392.391-1.025-.001-1.416l.016.016c-.397-.397-1.018-.388-1.401.006l-1.5 1.547zm-7 5.731c0-.552.456-1 1.002-1h9.995c.554 0 1.002.444 1.002 1 0 .552-.456 1-1.002 1h-9.995c-.554 0-1.002-.444-1.002-1z" fill="#0176C3"/></svg>
                    .RIS
                </span>
                <span class="citations__types">
                        <span>
                            Papers
                        </span>
                        <span>
                            Reference Manager
                        </span>
                        <span>
                            RefWorks
                        </span>
                        <span>
                            Zotero
                        </span>
                </span>
            </a>
        </li>
        <li>
            <a href="//citation-needed.springer.com/v2/references/10.1007/s00530-012-0271-3?format&#x3D;endnote&amp;flavour&#x3D;citation"
               title="Download this article&#39;s citation as a .ENW file" class="gtm-export-citation" data-gtmlabel="ENW">
                <span class="citations__extension" data-gtmlabel="ENW">
                    <svg class="u-vertical-align-absolute" width="12" height="14" viewBox="0 0 12 14" xmlns="http://www.w3.org/2000/svg"><path d="M7 7.269v-6.271c0-.551-.448-.998-1-.998-.556 0-1 .447-1 .998v6.271l-1.5-1.547c-.375-.387-1.01-.397-1.401-.006l.016-.016c-.397.397-.391 1.025-.001 1.416l3.178 3.178c.392.392 1.024.391 1.415 0l3.178-3.178c.392-.392.391-1.025-.001-1.416l.016.016c-.397-.397-1.018-.388-1.401.006l-1.5 1.547zm-7 5.731c0-.552.456-1 1.002-1h9.995c.554 0 1.002.444 1.002 1 0 .552-.456 1-1.002 1h-9.995c-.554 0-1.002-.444-1.002-1z" fill="#0176C3"/></svg>
                    .ENW
                </span>
                <span class="citations__types">
                        <span>
                            EndNote
                        </span>
                </span>
            </a>
        </li>
        <li>
            <a href="//citation-needed.springer.com/v2/references/10.1007/s00530-012-0271-3?format&#x3D;bibtex&amp;flavour&#x3D;citation"
               title="Download this article&#39;s citation as a .BIB file" class="gtm-export-citation" data-gtmlabel="BIB">
                <span class="citations__extension" data-gtmlabel="BIB">
                    <svg class="u-vertical-align-absolute" width="12" height="14" viewBox="0 0 12 14" xmlns="http://www.w3.org/2000/svg"><path d="M7 7.269v-6.271c0-.551-.448-.998-1-.998-.556 0-1 .447-1 .998v6.271l-1.5-1.547c-.375-.387-1.01-.397-1.401-.006l.016-.016c-.397.397-.391 1.025-.001 1.416l3.178 3.178c.392.392 1.024.391 1.415 0l3.178-3.178c.392-.392.391-1.025-.001-1.416l.016.016c-.397-.397-1.018-.388-1.401.006l-1.5 1.547zm-7 5.731c0-.552.456-1 1.002-1h9.995c.554 0 1.002.444 1.002 1 0 .552-.456 1-1.002 1h-9.995c-.554 0-1.002-.444-1.002-1z" fill="#0176C3"/></svg>
                    .BIB
                </span>
                <span class="citations__types">
                        <span>
                            BibTeX
                        </span>
                        <span>
                            JabRef
                        </span>
                        <span>
                            Mendeley
                        </span>
                </span>
            </a>
        </li>
</ul>
    </div>

                                                <div class="share-this" data-component="SV.Dropdown" data-namespace="shareThis">
        <h3 class="u-h4" data-role="button-dropdown__title">
    <span>Share</span>
    <span class="hide-text-small">article</span>
</h3>
<ul class="share-this__content" data-role="button-dropdown__content">
    <li>
        <a class="test-shareby-email-link gtm-shareby-email-link" href="mailto:?to&#x3D;&amp;subject&#x3D;Read%20this%20article%20on%20SpringerLink&amp;body&#x3D;Timelines%3A%20simplifying%20the%20programming%20of%20lag%20compensation%20for%20the%20next%20generation%20of%20networked%20games%0A%0Ahttps%3A%2F%2Flink.springer.com%2Farticle%2F10.1007%2Fs00530-012-0271-3" title="Share this article via email">
            <span class="share-this__types">
                <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><g fill="none"><path fill-opacity="0" fill="#fff" d="M0 0h24v24h-24z"/><g transform="translate(3 5)"><rect fill="#F9F9F9" width="18" height="14" rx="2"/><path d="M1 2.006v9.988c0 .557.446 1.006.995 1.006h14.01c.549 0 .995-.449.995-1.006v-9.988c0-.557-.446-1.006-.995-1.006h-14.01c-.549 0-.995.449-.995 1.006zm-1 0c0-1.108.893-2.006 1.995-2.006h14.01c1.102 0 1.995.897 1.995 2.006v9.988c0 1.108-.893 2.006-1.995 2.006h-14.01c-1.102 0-1.995-.897-1.995-2.006v-9.988zM9 9l7-4v-1.443l-7 4-7-4v1.443z" fill="#666"/></g></g></svg>
                <span>Email</span>
            </span>
        </a>
    </li>
    <li>
        <a class="test-shareby-facebook-link gtm-shareby-facebook-link" href="https://www.facebook.com/sharer/sharer.php?u&#x3D;https%3A%2F%2Flink.springer.com%2Farticle%2F10.1007%2Fs00530-012-0271-3" target="_blank" rel="noopener noreferrer" title="Share this article via Facebook">
            <span class="share-this__types">
                <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><g fill="none"><path fill-opacity="0" fill="#fff" d="M0 0h24v24h-24z"/><path d="M12.717 19.091h-2.66v-6.274h-1.329v-2.162h1.329v-1.298c0-1.763.75-2.813 2.883-2.813h1.775v2.162h-1.11c-.83 0-.885.302-.885.866l-.004 1.082h2.011l-.235 2.162h-1.775v6.274z" fill="#666"/></g></svg>
                <span>Facebook</span>
            </span>
        </a>
    </li>
    <li>
        <a class="test-shareby-twitter-link gtm-shareby-twitter-link" href="https://twitter.com/intent/tweet?text&#x3D;I%27m%20reading%20this%20on%20%23springerlink&amp;url&#x3D;https%3A%2F%2Flink.springer.com%2Farticle%2F10.1007%2Fs00530-012-0271-3" target="_blank" rel="noopener noreferrer" title="Share this article via Twitter">
            <span class="share-this__types">
                <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><g fill="none"><path fill-opacity="0" fill="#fff" d="M0 0h24v24h-24z"/><path d="M16.651 9.189c.485-.306.858-.792 1.033-1.371-.454.284-.957.49-1.493.601-.428-.482-1.039-.783-1.715-.783-1.298 0-2.349 1.11-2.349 2.478 0 .194.019.384.06.564-1.952-.104-3.684-1.089-4.843-2.59-.202.367-.318.793-.318 1.247 0 .859.415 1.618 1.045 2.063-.385-.013-.748-.126-1.065-.31v.03c0 1.201.809 2.203 1.886 2.43-.198.058-.405.087-.62.087-.151 0-.299-.015-.442-.044.299.984 1.166 1.702 2.195 1.721-.805.665-1.818 1.061-2.919 1.061-.19 0-.377-.011-.561-.034 1.04.703 2.275 1.113 3.602 1.113 4.323 0 6.686-3.777 6.686-7.052l-.006-.321c.459-.35.859-.786 1.173-1.283-.422.197-.875.33-1.349.39z" fill="#666"/></g></svg>
                <span>Twitter</span>
            </span>
        </a>
    </li>
        <li>
            <a class="test-shareby-linkedin-link gtm-shareby-linkedin-link" href="https://www.linkedin.com/shareArticle?mini&#x3D;true&amp;url&#x3D;https%3A%2F%2Flink.springer.com%2Farticle%2F10.1007%2Fs00530-012-0271-3&amp;title&#x3D;Timelines: simplifying the programming of lag compensation for the next generation of networked games&amp;summary&#x3D;Lag compensation algorithms used in networked games require programmers to manage the complexities of dealing with both time and shared state. This can make implementing lag compensation techniques challenging. The difficulties in expressing these a…" target="_blank" rel="noopener noreferrer" title="Share this article via LinkedIn">
                <span class="share-this__types">
                    <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><g fill="none"><path fill-opacity="0" fill="#fff" d="M0 0h24v24h-24z"/><path d="M6.821 10.044h2.126v7.41h-2.126v-7.41zm1.009-.927h-.015c-.77 0-1.269-.566-1.269-1.284 0-.732.514-1.287 1.299-1.287.784 0 1.267.554 1.282 1.285 0 .717-.498 1.286-1.297 1.286zm9.625 8.338h-2.411v-3.835c0-1.004-.377-1.688-1.206-1.688-.634 0-.987.462-1.151.908-.062.159-.052.382-.052.606v4.01h-2.389s.031-6.794 0-7.411h2.389v1.163c.141-.509.904-1.234 2.122-1.234 1.511 0 2.698 1.067 2.698 3.361v4.121z" fill="#666"/></g></svg>
                    <span>LinkedIn</span>
                </span>
            </a>
        </li>
        <li>
            <a class="gtm-shareby-sharelink-link" data-test="shareable-link" href="/sharelink/10.1007/s00530-012-0271-3" target="_blank" rel="noopener noreferrer" title="Get shareable link">
                <span class="share-this__types">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="#666" d="M9 7c-2.8 0-5 2.2-5 5s2.2 5 5 5h2v-2h-2c-1.7 0-3-1.3-3-3s1.3-3 3-3h2v-2h-2zm6 0c2.8 0 5 2.2 5 5s-2.2 5-5 5h-2v-2h2c1.7 0 3-1.3 3-3s-1.3-3-3-3h-2v-2h2zm-1 4c.5 0 1 .4 1 1s-.5 1-1 1h-4c-.5 0-1-.4-1-1s.5-1 1-1h4z"/></svg>
                    <span>Shareable link</span>
                </span>
            </a>
        </li>
</ul>
    </div>

                                        </div>
                                    </div>
                                    <nav class="toc" aria-label="article contents">
    <h2 class="u-h4 u-screenreader-only">Table of contents</h2>
    <ul id="article-contents" class="article-contents" role="menu">
            <li role="menuitem">
                <a title="Article" href="#enumeration"><span class="u-overflow-ellipsis">Article</span></a>
            </li>
            <li role="menuitem">
                <a title="Abstract" href="#Abs1"><span class="u-overflow-ellipsis">Abstract</span></a>
            </li>
            <li role="menuitem">
                <a title="1 Introduction" href="#Sec1"><span class="u-overflow-ellipsis">1 Introduction</span></a>
            </li>
            <li role="menuitem">
                <a title="2 Why time matters" href="#Sec2"><span class="u-overflow-ellipsis">2 Why time matters</span></a>
            </li>
            <li role="menuitem">
                <a title="3 The timelines model" href="#Sec7"><span class="u-overflow-ellipsis">3 The timelines model</span></a>
            </li>
            <li role="menuitem">
                <a title="4 Using timelines" href="#Sec8"><span class="u-overflow-ellipsis">4 Using timelines</span></a>
            </li>
            <li role="menuitem">
                <a title="5 Implementing timelines" href="#Sec17"><span class="u-overflow-ellipsis">5 Implementing timelines</span></a>
            </li>
            <li role="menuitem">
                <a title="6 Background and related work" href="#Sec22"><span class="u-overflow-ellipsis">6 Background and related work</span></a>
            </li>
            <li role="menuitem">
                <a title="7 Discussion" href="#Sec25"><span class="u-overflow-ellipsis">7 Discussion</span></a>
            </li>
            <li role="menuitem">
                <a title="8 Conclusion" href="#Sec29"><span class="u-overflow-ellipsis">8 Conclusion</span></a>
            </li>
            <li role="menuitem">
                <a title="Acknowledgments" href="#Acknowledgments"><span class="u-overflow-ellipsis">Acknowledgments</span></a>
            </li>
            <li role="menuitem">
                <a title="References" href="#Bib1"><span class="u-overflow-ellipsis">References</span></a>
            </li>
            <li role="menuitem">
                <a title="Copyright information" href="#copyrightInformation"><span class="u-overflow-ellipsis">Copyright information</span></a>
            </li>
            <li role="menuitem">
                <a title="Authors and Affiliations" href="#authorsandaffiliations"><span class="u-overflow-ellipsis">Authors and Affiliations</span></a>
            </li>
            <li role="menuitem">
                <a title="About this article" href="#aboutcontent"><span class="u-overflow-ellipsis">About this article</span></a>
            </li>
    </ul>
</nav>

                                </div>
                                        <div class="skyscraper-ad u-hide" data-component="SpringerLink.GoogleAds" data-namespace="skyscraper"></div>

                            </div>
                        </aside>
                    </div>
                </article>
            </main>

            <section class="banner banner--cookies-policy u-js-hide" data-component="SpringerLink.CookiePolicy">
    <div class="banner__content u-interface">
        <h2 class="u-screenreader-only">Cookies</h2>
        <span class="banner__cookie-text">We use cookies to improve your experience with our site.</span>
        <a class="banner__link banner__link--cookie" href="/termsandconditions#cookies">More information</a>

        <form class="banner__form" action="/acceptcookies" method="POST">
            <button class="u-link-like banner__right-ui">Accept</button>
        </form>
    </div>
</section>

                <footer class="footer u-interface">
        <div class="footer__aside-wrapper">
            <div class="footer__content">
                <div class="footer__aside">
    <p class="footer__strapline">Over 10 million scientific documents at your fingertips</p>
                <div class="footer__edition" data-component="SpringerLink.EditionSwitcher">
                    <h3 class="u-hide" data-role="button-dropdown__title" data-btn-text="Switch between Academic &#38; Corporate Edition">Switch Edition</h3>
                    <ul data-role="button-dropdown__content">
                        <li class="selected"><a href="/siteEdition/link" id="siteedition-academic-link">Academic Edition</a></li>
                        <li><a href="/siteEdition/rd" id="siteedition-corporate-link">Corporate Edition</a></li>
                    </ul>
                </div>
</div>
            </div>
        </div>
        <div class="footer__content">
            <ul class="footer__nav">
    <li>
        <a href="/">Home</a>
    </li>
    <li>
        <a href="/impressum">Impressum</a>
    </li>
    <li>
        <a href="/termsandconditions">Legal Information</a>
    </li>
    <li>
        <a href="/accessibility" class="gtm-footer-accessibility">Accessibility</a>
    </li>
    <li>
        <a id="contactus-footer-link" href="/contactus">Contact Us</a>
    </li>
</ul>
            <a class="parent-logo"
   target="_blank" rel="noreferrer noopener"
   href="//www.springernature.com"
   title="Go to Springer Nature">
    <span class="u-screenreader-only">Springer Nature</span>
    <svg width="125" height="12">
        <image width="125" height="12" alt="Springer Nature logo"
               src="/springerlink-static/1048886164/images/png/springernature.png"
               xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="/springerlink-static/1048886164/images/svg/springernature.svg">
        </image>
    </svg>
</a>

<p class="footer__copyright">&copy; 2017 Springer International Publishing AG. Part of <a target="_blank" rel="noreferrer noopener" href="//www.springernature.com">Springer Nature</a>.</p>

    <p class="footer__user-access-info">
        <span>Not logged in</span>
        <span>Not affiliated</span>
        <span>116.231.172.41</span>
    </p>
    <p class="footer__license">
        <a id="footer-dynamic-legal" title="View ICP license"
           href="http://www.miibeian.gov.cn" target="_blank" rel="noopener noreferrer">
            沪ICP备15051854号-2
        </a>
    </p>

        </div>
    </footer>

        </div>
            <script type="text/javascript">
        (function() {
            var linkEl = document.querySelector('.js-ctm');
            if (window.matchMedia && window.matchMedia(linkEl.media)) {
                var scriptMathJax = document.createElement('script');
                scriptMathJax.async = true;
                scriptMathJax.src = '/springerlink-static/1048886164/js/mathJax.js';
                var s0 = document.getElementsByTagName('script')[0];
                s0.parentNode.insertBefore(scriptMathJax, s0);
            }
        })();
    </script>

<script type="text/javascript">
    (function() {
        var linkEl = document.querySelector('.js-ctm');
        if (window.matchMedia && window.matchMedia(linkEl.media)) {
            (function(h){h.className = h.className.replace('no-js', 'js')})(document.documentElement);
            window.SpringerLink = window.SpringerLink || {};
            window.SpringerLink.staticLocation = '/springerlink-static/1048886164';
            var scriptJquery = document.createElement('script');
            var scriptMain = document.createElement('script');
            scriptJquery.async = false;
            scriptJquery.src = window.SpringerLink.staticLocation + '/js/jquery-3.2.1.min.js';
            scriptMain.async = false;
            scriptMain.src =  window.SpringerLink.staticLocation + '/js/main.js';
            document.body.appendChild(scriptJquery);
            document.body.appendChild(scriptMain);
        }
    })();
</script>

<script type="text/javascript">
    window.onload = function() {
    var linkEl = document.querySelector('.js-ctm');



    function viewport(size) {
        if (document.documentElement.clientWidth < 620) {
            size = 'small';
        }
        else if(document.documentElement.clientWidth < 1075 ) {
            size = 'medium';
        }
        else {
            size = 'wide';
        }
        return size
    }

    function reportForMouseEvent(linkCssSelector, nolardUrl, experiment, abgroup) {
        $('body').delegate(linkCssSelector, 'click', function() {
            reportConversion(nolardUrl, experiment, abgroup);
        });
    }

    function reportForMouseEventOnce(linkCssSelector, nolardUrl, experiment, abgroup) {
        var counter = 0;
        $('body').delegate(linkCssSelector, 'click', function() {
            if(counter == 0) {
                reportConversion(nolardUrl, experiment, abgroup);
                counter++;
            }
        });
    }

    function reportParticipation(nolardUrl, experiment, abgroup) {
        $.ajax({ url: nolardUrl + '/participate/' + experiment + '/' + abgroup });
    }

    function reportConversion(nolardUrl, experiment, abgroup) {
        $.ajax({ url: nolardUrl + '/convert/' + experiment + '/' + abgroup });
    }
    };
</script>

<script class="kxct" data-id="KDqyaFZ_" data-timing="async" data-version="3.0" type="text/javascript">
 window.Krux||((Krux=function(){Krux.q.push(arguments)}).q=[]);
 (function(){
   var k=document.createElement('script');k.type='text/javascript';k.async=true;
   k.src=(location.protocol==='https:'?'https:':'http:')+'//cdn.krxd.net/controltag/KDqyaFZ_.js';
   var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(k,s);
 }());
</script>

<script>
    window.Krux||((Krux=function(){Krux.q.push(arguments);}).q=[]);
    (function(){
        function retrieve(n){
            var m, k='kx'+n;
            if (window.localStorage) {
                return window.localStorage[k] || "";
            } else if (navigator.cookieEnabled) {
                m = document.cookie.match(k+'=([^;]*)');
                return (m && unescape(m[1])) || "";
            } else {
                return '';
            }
        }
        Krux.user = retrieve('user');
        Krux.segments = retrieve('segs') && retrieve('segs').split(',') || [];
    })();
</script>

    <script type="text/javascript">
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
        (function() {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') +
                    '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        })();
    </script>
    <script type="text/javascript" id="googletag-push">
        
            var adSlot = '270604982/springerlink/530/article';
        

        var definedSlots = [
                {slot: [728, 90], containerName: 'doubleclick-leaderboard-ad'},
                {slot: [160, 600], containerName: 'doubleclick-ad'},
        ];

        googletag.cmd.push(function() {
                googletag.pubads().setTargeting("doi","10.1007-s00530-012-0271-3");
                googletag.pubads().setTargeting("kwrd",["Lag_compensation","Consistency_maintenance","Networked_games"]);
                googletag.pubads().setTargeting("pmc",["I","I18059","I13022","I14045","I15025","I15033","I22013"]);
                googletag.pubads().setTargeting("BPID",["1"]);
                googletag.pubads().setTargeting("edition","academic");
                googletag.pubads().setTargeting("sucode","SC6");
                googletag.pubads().setTargeting("eissn","1432-1882");
                googletag.pubads().setTargeting("pissn","0942-4962");
                googletag.pubads().setTargeting("ksg",Krux.segments);
                googletag.pubads().setTargeting("kuid",Krux.uid);
                googletag.pubads().setTargeting("logged","N");
            googletag.pubads().enableSingleRequest();
            googletag.pubads().enableAsyncRendering();
            googletag.enableServices();
        });
    </script>

        
        <span id="chat-widget" class="u-hide"></span>
                    <noscript>
                <img aria-hidden="true" role="presentation" src="https://ssl-springer.met.vgwort.de/na/vgzm.415900-10.1007-s00530-012-0271-3" width='1' height='1' alt='' />
            </noscript>

    </body>
</html>
